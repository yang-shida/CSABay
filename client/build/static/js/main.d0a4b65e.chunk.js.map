{"version":3,"sources":["auth/auth.js","components/S3.js","components/NavBar.js","components/SignupForm.js","components/Cards.js","components/ContactInfoCard.js","components/ProductDetailPage.js","components/MainPage.js","components/ImageUploader.js","components/CreatePostPage.js","components/ChangePasswordPage.js","components/EditContactInfoPage.js","components/EditPostPage.js","components/ProfilePage.js","components/LoginPage.js","auth/ProtectedRoute.js","components/ForgotPasswordPage.js","App.js","reportWebVitals.js","index.js"],"names":["this","authenticated","cb","MAX_CONTENT_LEN","config","AWS","update","region","accessKeyId","secretAccessKey","S3_GET","key","a","axios","post","then","res","data","code","console","log","message","url","catch","err","S3_UPLOAD","signed","fileList","index","Promise","resolve","reject","name","fields","type","file","originFileObj","formData","FormData","append","withCredentials","S3_UPLOAD_SINGLE_FILE","S3_DELETE_BY_KEY","S3_GET_SIGNED_POST","dir","fileUid","uid","S3_GET_OBJECT_TYPE","SubMenu","Menu","NavBar","isAuthenticated","user","currentRoute","routerProps","setUserInfo","useState","currentPage","setCurrentPage","isConfirmLogoutVisible","setIsConfirmLogoutVisible","profilePictureURL","setProfilePictureURL","useEffect","profilePictureKey","handleClick","e","onClick","selectedKeys","mode","Item","style","margin","padding","fontSize","to","icon","size","marginRight","firstName","substring","lastName","src","title","float","UserOutlined","visible","onOk","auth","logout","document","cookie","history","push","onCancel","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","SignupForm","Form","useForm","form","setFirstName","setLastName","setUsername","email","setEmail","emailVerification","setEmailVerification","wechatID","setWechatID","pwd","setPwd","confirm","setConfirm","phoneNum","setPhoneNum","isGetCodeButtonWaiting","setIsGetCodeButtonWaiting","getCodeButtonWaitingTime","setGetCodeButtonWaitingTime","delay","setDelay","onFinish","newUser","toLowerCase","response","success","resetFields","error","callback","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","label","rules","required","value","onChange","target","validator","rule","test","gutter","noStyle","placeholder","disabled","getFieldValue","QuestionCircleOutlined","_","hasNum","hasUpper","hasLower","length","hasFeedback","settings","colorScheme","levels","noLevel","height","alwaysVisible","inputProps","Password","htmlType","Meta","Card","widthOfCard","locationPriceContainerStyle","width","position","marginBottom","locationStyle","fontFamily","top","left","transform","textAlign","priceStyle","fontWeight","Cards","posts","onClickStar","favoriteIDs","displayMyPost","onClickDelete","onClickEdit","onClickCard","isAuth","postsWithCoverUrl","setPostsWithCoverUrl","isSubscribed","temp","count","currentPost","pictureKeyArray","coverUrl","func","map","hoverable","bordered","actions","EditOutlined","stopPropagation","DeleteOutlined","_id","includes","StarTwoTone","twoToneColor","StarOutlined","onConfirm","okText","cancelText","cover","overflow","borderRadius","objectFit","alt","price","clear","marginLeft","avatar","description","Math","floor","Date","now","parse","modifiedTimestamp","profilePictureStyle","borderWidth","borderStyle","borderColor","contactInfoHeadingTextStyle","contactInfoStyle","color","marginTop","ContactInfoCard","isInfoVisible","loading","headerContainerStyle","titleStyle","actionIconContainerStyle","actionIconStyle","contactInfoLayout","md","lg","pictureWallLayout","otherInfoLayout","descriptionLayout","otherInfoStyle","headingTextStyle","dividerLayout","ProductDetailPage","isFavorite","pictureUrlArray","setPictureUrlArray","currentKey","prevState","orientation","backgroundColor","PreviewGroup","typeOfPost","zipcode","MainPage","setUser","setPosts","isProductDetailVisible","setIsProductDetailVisible","selectedPost","setSelectedPost","selectedPostUserInfo","setSelectedPostUserInfo","get","getPosts","addSavedPosts","postID","updatedUser","savedPosts","put","deleteSavedPosts","updatedSavedPosts","splice","indexOf","simplifiedUserInfo","footer","getBase64","reader","FileReader","readAsDataURL","onload","result","onerror","itemCounterStyle","pictureSizeStyle","bottom","uploadButton","PlusOutlined","ImageUploader","maxNumberOfPictures","setPictureKeyArray","setFileList","previewVisible","setPreviewVisible","previewImage","setPreviewImage","previewTitle","setPreviewTitle","currentNumberOfPictures","setCurrentNumberOfPictures","handlePreview","preview","lastIndexOf","listType","onPreview","setTimeout","filter","file1","onRemove","beforeUpload","Option","Select","CreatePostPage","setTitle","setDescription","durationDays","setDurationDays","setTypeOfPost","setZipcode","setPrice","content","newPost","duration","initialValues","justify","TextArea","rows","min","max","setFieldsValue","undefined","formatter","ChangePasswordPage","oldPassword","setOldPassword","password","setPassword","pwds","oldPwd","EditContactInfoPage","EditPostPage","isEditPostVisible","setIsEditPostVisible","array","status","originalPictureKeyArray","updatedPost","defaultValue","base_","Sider","Layout","profileContainerStyle","profileSideBarStyle","paddingTop","cursor","basicInfoStyle","profileMainBodyStyle","ProfilePage","myPosts","setMyPosts","mySavedPosts","setMySavedPosts","currentMenuKey","setCurrentMenuKey","window","innerWidth","sideBarWidth","setSideBarWidth","selectedPostID","setSelectedPostID","isDeleteModalVisible","setIsDeleteModalVisible","setValue","fetchMyPosts","postsFromServer","getMyPosts","i","fetchPost","fetchedPost","getMySavedPosts","postFromServer","onSelectMenu","Number","deletePost","postToDelete","delete","handleDeleteOk","handleDeleteCancel","handleProfilePictureUpload","err_message","theme","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","quality","modalTitle","modalOK","customRequest","placement","defaultSelectedKeys","onSelect","LoginPage","userInfo","toLocaleLowerCase","login","ProtectedRoute","RenderComponents","render","rest","props","pathname","state","from","location","ForgotPasswordPage","body","App","setIsAuth","className","path","exact","subTitle","extra","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.d0a4b65e.chunk.js","sourcesContent":["class Auth {\r\n    constructor() {\r\n        this.authenticated = false;\r\n    }\r\n  \r\n    login(cb) {\r\n        this.authenticated = true;\r\n        cb();\r\n    }\r\n  \r\n    logout(cb) {\r\n        this.authenticated = false;\r\n        cb();\r\n    }\r\n  \r\n    isAuthenticated() {\r\n         return this.authenticated;\r\n    }\r\n}\r\n\r\nexport default new Auth();","// import {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST, S3_DELETE_BY_KEY} from './S3'\r\n\r\nimport { responsiveArray } from 'antd/lib/_util/responsiveObserve';\r\nimport AWS from 'aws-sdk';\r\nimport axios from \"axios\";\r\n\r\nexport const MAX_CONTENT_LEN = 10485760\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst config = {\r\n    bucketName: 'csabayphotos',\r\n    region: 'us-east-2',\r\n    accessKeyId: 'AKIA2SGQI5JKBX7R45YB',\r\n    secretAccessKey: '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',\r\n}\r\n\r\nAWS.config.update({\r\n    region: config.region,\r\n    accessKeyId: config.accessKeyId,\r\n    secretAccessKey: config.secretAccessKey\r\n});\r\n\r\nexport const S3_GET = async (key) => {\r\n    const url = await axios.post(base_ + '/api/s3-get-url', {key: key})\r\n        .then(\r\n            (res) => {\r\n                if(res.data.code===1){\r\n                    console.log(res.data.message)\r\n                    return ''\r\n                }\r\n                else{\r\n                    return res.data.url\r\n                }\r\n            }\r\n        )\r\n        .catch(\r\n            (err) => {\r\n                console.log(err)\r\n                return ''\r\n            }\r\n        )\r\n\r\n    return url\r\n}\r\n\r\nexport const S3_UPLOAD = async (signed, fileList, index) => {\r\n    return new Promise(\r\n        async (resolve, reject) => {\r\n            const data = {\r\n                ...signed.fields,\r\n                'Content-Type': fileList[index].type,\r\n                file: fileList[index].originFileObj\r\n            }\r\n        \r\n            const formData = new FormData()\r\n            for (const name in data){\r\n                formData.append(name, data[name])\r\n            }\r\n        \r\n            axios.post(\r\n                signed.url,\r\n                formData,\r\n                {withCredentials: false}\r\n            )\r\n                .then(\r\n                    () => {\r\n                        resolve(\"S3 Upload OK!\")\r\n                    }\r\n                )\r\n                .catch (\r\n                    (err) => {\r\n                        reject(err)\r\n                    }\r\n                ) \r\n        }\r\n    )\r\n    \r\n}\r\n\r\nexport const S3_UPLOAD_SINGLE_FILE = (signed, file) => {\r\n    return new Promise(\r\n        async (resolve, reject) => {\r\n            const data = {\r\n                ...signed.fields,\r\n                'Content-Type': file.type,\r\n                file: file\r\n            }\r\n        \r\n            const formData = new FormData()\r\n            for (const name in data){\r\n                formData.append(name, data[name])\r\n            }\r\n        \r\n            axios.post(\r\n                signed.url,\r\n                formData,\r\n                {withCredentials: false}\r\n            )\r\n                .then(\r\n                    () => {\r\n                        resolve(\"S3 Upload OK!\")\r\n                    }\r\n                )\r\n                .catch (\r\n                    (err) => {\r\n                        console.log(err)\r\n                        reject(err)\r\n                    }\r\n                ) \r\n        }\r\n    )\r\n}\r\n\r\nexport const S3_DELETE = async (file) => {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            axios.post(base_ + '/api/s3-delete-by-key', {key: `ProductDetailPhotos/${file.uid}`})\r\n                .then(\r\n                    (res) => {\r\n                        if(res.data.code === 1){\r\n                            console.log(res.data.message)\r\n                            reject(res.data.message)\r\n                        }\r\n                        else{\r\n                            resolve()\r\n                        }\r\n                    }\r\n                )\r\n                .catch(\r\n                    (err) => {\r\n                        console.log(err)\r\n                        reject(\"Fail to delete object\")\r\n                    }\r\n                )\r\n        }\r\n    )\r\n}\r\n\r\nexport const S3_DELETE_BY_KEY = async (key) => {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            axios.post(base_ + '/api/s3-delete-by-key', {key: key})\r\n                .then(\r\n                    (res) => {\r\n                        if(res.data.code === 1){\r\n                            console.log(res.data.message)\r\n                            reject(res.data.message)\r\n                        }\r\n                        else{\r\n                            resolve()\r\n                        }\r\n                    }\r\n                )\r\n                .catch(\r\n                    (err) => {\r\n                        console.log(err)\r\n                        reject(\"Fail to delete object\")\r\n                    }\r\n                )\r\n        }\r\n    )\r\n    \r\n}\r\n\r\n\r\n\r\nexport const S3_GET_SIGNED_POST = (file, dir) => {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            axios.post(base_ + '/api/s3-get-signed-post', {fileUid: file.uid, dir: dir})\r\n                .then(\r\n                    (res) => {\r\n                        if(res.data.code === 1){\r\n                            console.log(res.data.message)\r\n                            reject(res.data.message)\r\n                        }\r\n                        else{\r\n                            resolve(res.data.signed)\r\n                        }\r\n                    }\r\n                )\r\n                .catch(\r\n                    (err) => {\r\n                        console.log(err)\r\n                        reject(\"Fail to create pre-signed post\")\r\n                    }\r\n                )\r\n        }\r\n    )\r\n\r\n}\r\n\r\nexport const S3_GET_OBJECT_TYPE = (key) => {\r\n    return new Promise(\r\n        (resolve, reject) => {\r\n            axios.post(base_ + '/api/s3-get-object-type', {key: key})\r\n                .then(\r\n                    (res) => {\r\n                        if(res.data.code === 1){\r\n                            console.log(res.data.message)\r\n                            reject(res.data.message)\r\n                        }\r\n                        else{\r\n                            resolve(res.data.type)\r\n                        }\r\n                    }\r\n                )\r\n                .catch(\r\n                    (err) => {\r\n                        console.log(err)\r\n                        reject(\"Fail to get object type\")\r\n                    }\r\n                )\r\n        }\r\n    )\r\n}","import { Menu } from 'antd';\r\nimport {useState, useEffect} from 'react'\r\nimport { Avatar, Image, Modal } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport {Link} from 'react-router-dom'\r\nimport auth from '../auth/auth';\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST, S3_DELETE_BY_KEY, S3_UPLOAD_SINGLE_FILE} from './S3'\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst NavBar = ({isAuthenticated=false, user, currentRoute, routerProps, setUserInfo}) => {\r\n    const [currentPage, setCurrentPage] = useState(currentRoute)\r\n    const [isConfirmLogoutVisible, setIsConfirmLogoutVisible] = useState(false)\r\n\r\n    const [profilePictureURL, setProfilePictureURL] = useState(\"\")\r\n\r\n    useEffect(\r\n        () => {\r\n            setCurrentPage(currentRoute)\r\n            setIsConfirmLogoutVisible(false)\r\n        }, [currentRoute]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            if(isAuthenticated && user.profilePictureKey !== \"\"){\r\n                S3_GET(user.profilePictureKey)\r\n                    .then(\r\n                        (url) => {\r\n                            setProfilePictureURL(url)\r\n                        }\r\n                    )\r\n            }\r\n        }, [user]\r\n    )\r\n\r\n    const handleClick = e => {\r\n        setCurrentPage(e.key);\r\n    };\r\n\r\n    const onLogoutConfirm = () => {\r\n        auth.logout(\r\n            () => {\r\n                setIsConfirmLogoutVisible(false)\r\n                setUserInfo()\r\n                document.cookie = \"userid=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\r\n                routerProps.history.push('/')\r\n            }\r\n        )\r\n    }\r\n\r\n    const onLogoutCancel = () => {\r\n        setCurrentPage(currentRoute)\r\n        setIsConfirmLogoutVisible(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {\r\n                isAuthenticated?\r\n                <Menu onClick={handleClick} selectedKeys={[currentPage]} mode=\"horizontal\">\r\n\r\n                    <Menu.Item key=\"home\" style={{margin: '0px 5px 0px 10px', padding: '0px 20px', fontSize: '18px'}}>\r\n                        <Link to='/'>UF CSABay</Link>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item key=\"create-post\" style={{margin: '0px 5px 0px 5px', padding: '0px 20px'}}>\r\n                        <Link to='/create-post'>New Post</Link>\r\n                    </Menu.Item>\r\n\r\n                    <SubMenu key=\"user-info\"\r\n                        icon = {\r\n                            user.profilePictureKey===\"\"?\r\n                            <Avatar size=\"default\" style={{marginRight: '10px'}}>{`${user.firstName.substring(0,1)}${user.lastName.substring(0,1)}`}</Avatar>:\r\n                            <Avatar size=\"default\" src={profilePictureURL} style={{marginRight: '10px'}} />\r\n                        }\r\n                        title= {`${user.firstName} ${user.lastName}`}\r\n                        style={{float: 'right', margin: '0px 10px 0px 0px', padding: '0px'}}\r\n                    >\r\n                        \r\n                        <Menu.Item key=\"profile\"><Link to='/profile'>User Profile</Link></Menu.Item>\r\n                        <Menu.Item key=\"sign-out\" onClick={()=>{setIsConfirmLogoutVisible(true)}}>\r\n                            Logout\r\n                        </Menu.Item>\r\n                        \r\n                    </SubMenu>\r\n\r\n                </Menu>\r\n                :\r\n                <Menu onClick={handleClick} selectedKeys={[currentPage]} mode=\"horizontal\">\r\n\r\n                    <Menu.Item key=\"home\" style={{margin: '0px 5px 0px 10px', padding: '0px 20px', fontSize: '18px'}}>\r\n                        <Link to='/'>UF CSABay</Link>\r\n                    </Menu.Item>\r\n\r\n                    <SubMenu key=\"user-info\"\r\n                        icon = {<Avatar size=\"default\" icon={<UserOutlined />} style={{marginRight: '10px'}}/>} \r\n                        title= \"Please Login\"\r\n                        style={{float: 'right', margin: '0px 10px 0px 0px', padding: '0px'}}\r\n                    >\r\n                        <Menu.Item key=\"login\">\r\n                            <Link to='/login'>Login</Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"forgot-password\">\r\n                            <Link to='/forgot-password'>Forgot Password</Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"register\">\r\n                            <Link to='/register'>Register</Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                    \r\n                </Menu>\r\n\r\n            }\r\n\r\n            <Modal title=\"Confirm Logout\" visible={isConfirmLogoutVisible} onOk={onLogoutConfirm} onCancel={onLogoutCancel}>\r\n                <p>Are you sure to log out?</p>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Tooltip,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  message\r\n} from 'antd';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport {PasswordInput} from 'antd-password-input-strength'\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n      xs: {\r\n        span: 24,\r\n      },\r\n      sm: {\r\n        span: 8,\r\n      },\r\n    },\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n      },\r\n      sm: {\r\n        span: 8,\r\n      },\r\n    },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24, \r\n        },\r\n    },\r\n}\r\n\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n\r\nconst SignupForm = () => {\r\n    const [form] = Form.useForm();\r\n\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [emailVerification, setEmailVerification] = useState('')\r\n    const [wechatID, setWechatID] = useState('')\r\n    const [pwd, setPwd] = useState('')\r\n    const [confirm, setConfirm] = useState('')\r\n    const [phoneNum, setPhoneNum] = useState('')\r\n\r\n    const GET_CODE_WAITING = 30\r\n    const [isGetCodeButtonWaiting, setIsGetCodeButtonWaiting] = useState(false)\r\n    const [getCodeButtonWaitingTime, setGetCodeButtonWaitingTime] = useState(GET_CODE_WAITING)\r\n    const [delay, setDelay] = useState(null)\r\n\r\n\r\n    const onFinish = async () =>{\r\n        const newUser = {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email.toLowerCase(),\r\n            emailVerification: emailVerification,\r\n            wechatID: wechatID.toLowerCase(),\r\n            pwd: pwd,\r\n            phoneNum: phoneNum,\r\n            profilePictureKey: \"\"\r\n        }\r\n\r\n        axios.post(base_ + '/api/add-user', newUser).then((response) => {\r\n            if(response.data.code === 0){\r\n                message.success(\"Account created!\")\r\n                setFirstName('')\r\n                setLastName('')\r\n                setUsername('')\r\n                setEmail('')\r\n                setEmailVerification('')\r\n                setWechatID('')\r\n                setPwd('')\r\n                setConfirm('')\r\n                setPhoneNum('')\r\n        \r\n                form.resetFields();\r\n            }\r\n            else {\r\n                if(typeof(response.data.message)===\"string\"){\r\n                    message.error(response.data.message)\r\n                }\r\n                else{\r\n                    message.error(\"Something went wrong!\")\r\n                    console.log(response.data.message)\r\n                }\r\n                \r\n            }\r\n        }, (error)=> {\r\n            message.error(\"Something went wrong!\")\r\n            console.log(error)\r\n        });\r\n\r\n        \r\n\r\n        // Go to login page\r\n    }\r\n\r\n    const emailValidator = (rule, value) => {\r\n\t\tif (!value || /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.[a-zA-Z]{2,4}$/.test(value)) {\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\t\treturn Promise.reject('Please enter a valid email address!');\r\n\t}\r\n\r\n    useInterval(\r\n        () => {\r\n            if(getCodeButtonWaitingTime>=1){\r\n                setGetCodeButtonWaitingTime(getCodeButtonWaitingTime-1)\r\n            }\r\n            else{\r\n                setGetCodeButtonWaitingTime(GET_CODE_WAITING)\r\n                setIsGetCodeButtonWaiting(false)\r\n                setDelay(null)\r\n            }\r\n        }, delay\r\n    )\r\n\r\n    const onClickGetCode = () => {\r\n        // request code from backend\r\n        // if backend receives the request\r\n        setIsGetCodeButtonWaiting(true)\r\n        setDelay(1000)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Register</h1>\r\n            <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                name=\"signup\"\r\n                onFinish={onFinish}\r\n            >\r\n\r\n                <Form.Item\r\n                    name=\"first-name\"\r\n                    label=\"First Name\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your first name!',\r\n                        },\r\n                    ]\r\n                    }\r\n                >\r\n                    <Input value={firstName} onChange={(e) => setFirstName(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"last-name\"\r\n                    label=\"Last Name\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your last name!',\r\n                        },\r\n                    ]\r\n                    }\r\n                >\r\n                    <Input value={lastName} onChange={(e) => setLastName(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                {/* Can use email as key */}\r\n                {/* <Form.Item\r\n                    name=\"username\"\r\n                    label=\"Username\"\r\n                    rules={[\r\n                        // TODO: add rule to make it unique\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]\r\n                    }\r\n                >\r\n                    <Input value={username} onChange={(e) => setUsername(e.target.value)}/>\r\n                </Form.Item> */}\r\n\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                        {\r\n                            validator: emailValidator\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"* Email Verification Code\">\r\n                    <Row gutter={6}>\r\n                        <Col span={20}>\r\n                            <Form.Item\r\n                                name='code'\r\n                                noStyle\t\t\t\t\t\t\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input the email verification code you got!'\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Enter your email verification code\" value={emailVerification} onChange={(e) => setEmailVerification(e.target.value)}/>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <Button \r\n                                disabled={\r\n                                    !(/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.[a-zA-Z]{2,4}$/.test(form.getFieldValue('email'))) || isGetCodeButtonWaiting\r\n                                }\r\n                                onClick={onClickGetCode}\r\n                            >    \r\n                                {\r\n                                    isGetCodeButtonWaiting?\r\n                                    `${getCodeButtonWaitingTime} s`:\r\n                                    \"Get Code\"\r\n                                }\r\n                                \r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Item>\r\n\r\n                \r\n\r\n                <Form.Item\r\n                    name=\"wechat-id\"\r\n                    label=\"WeChat ID\"\r\n                >\r\n                    <Input value={wechatID} onChange={(e) => setWechatID(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label={\r\n                        <span>\r\n                            Password&nbsp;\r\n                            <Tooltip title=\"Password should be at least 6 characters long. You should include numbers, upper-case letters, and lower-case letters in your password.\">\r\n                            <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                                let hasNum = /\\d/.test(value);\r\n                                let hasUpper = /[A-Z]/.test(value);\r\n                                let hasLower = /[a-z]/.test(value);\r\n                                let hasSpace = / /.test(value)\r\n                                if(hasSpace){\r\n                                    return Promise.reject('Password cannot contain space!');\r\n                                }\r\n                                else if (value.length < 6) {\r\n                                    return Promise.reject('Password should be at least 6 characters long!');\r\n                                }\r\n                                else if(!hasNum || !hasUpper || !hasLower){\r\n                                    return Promise.reject('Please include numbers, upper-case letters, lower-case letters in your password!');\r\n                                }\r\n                                else{\r\n                                    return Promise.resolve();\r\n                                }\r\n                                \r\n                            },\r\n                        }),\r\n                    ]}    \r\n                    hasFeedback\r\n                >\r\n                    <PasswordInput \r\n                        value={pwd}\r\n                        onChange={(e) => setPwd(e.target.value)}\r\n                        settings={{\r\n                            colorScheme: {\r\n                                levels: [\"#ff4033\", \"#fe940d\", \"#ffd908\", \"#cbe11d\", \"#6ecc3a\"],\r\n                                noLevel: \"lightgrey\"\r\n                            },\r\n                            height: 7,\r\n                            alwaysVisible: true\r\n                        }}\r\n                        inputProps={{\r\n                            size: 'medium'\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"confirm\"\r\n                    label=\"Confirm Password\"\r\n                    hasFeedback\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please confirm your password!',\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                            if (!value || pwd === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n\r\n                            return Promise.reject('The two passwords that you entered do not match!');\r\n                            },\r\n                        }),\r\n                    ]}\r\n                >\r\n                    <Input.Password value={confirm} onChange={(e) => setConfirm(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    label=\"Phone Number\"\r\n                    // rules={[\r\n                    //     ()=>({\r\n                    //         validator(_, value){\r\n                    //             if(value==='' || value===undefined){\r\n                    //                 return Promise.resolve();\r\n                    //             }\r\n                    //             else if(!(/^\\d+$/.test(value))){\r\n                    //                 return Promise.reject('Phone number should only contain numbers!');\r\n                    //             }\r\n                    //             else{\r\n                    //                 return Promise.resolve();\r\n                    //             }\r\n                    //         }\r\n                    //     })\r\n                    // ]}\r\n                >\r\n                    <Input value={phoneNum} onChange={(e) => setPhoneNum(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupForm\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Card, Col, Row, Avatar, Popconfirm } from 'antd';\r\nimport { StarOutlined, DeleteOutlined, StarTwoTone, EditOutlined } from '@ant-design/icons';\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST} from './S3'\r\nimport auth from '../auth/auth';\r\nimport { CostExplorer } from 'aws-sdk';\r\n\r\nconst { Meta } = Card;\r\n\r\nconst widthOfCard = '300px';\r\n\r\nconst locationPriceContainerStyle = {\r\n    width: '250px',\r\n    height: '40px',\r\n    position: 'relative',\r\n    marginBottom: '10px'\r\n};\r\n\r\nconst locationStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '100%',\r\n    transform: 'translate(-100%, -50%)',\r\n    textAlign: 'Right', \r\n    fontSize: '10pt',\r\n    float: 'right'\r\n};\r\n\r\nconst priceStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '0%',\r\n    transform: 'translate(0%, -50%)',\r\n    textAlign: 'Left', \r\n    fontSize: '18pt', \r\n    fontWeight: '700',\r\n    float: 'left'\r\n};\r\n\r\nconst Cards = ({posts, onClickStar, favoriteIDs, displayMyPost, onClickDelete, onClickEdit, onClickCard, routerProps, isAuth}) => {\r\n\r\n    const onConfirmToLogin = () => {\r\n        routerProps.history.push('./login')\r\n    }\r\n\r\n    const [postsWithCoverUrl, setPostsWithCoverUrl] = useState([])\r\n\r\n    useEffect(\r\n        () => {\r\n            let isSubscribed = true\r\n\r\n            const func = async () => {\r\n                var temp = []\r\n                var count = posts.length\r\n                if(posts.length===0){\r\n                    setPostsWithCoverUrl(temp)\r\n                }\r\n                for(const post in posts){\r\n                    const currentPost = posts[post]\r\n                    if(posts[post].pictureKeyArray.length>0){\r\n                        await S3_GET(posts[post].pictureKeyArray[0]).then(\r\n                            (url) => {\r\n                                temp = [...temp, {...currentPost, coverUrl: url}]\r\n                                count--\r\n                                if(count === 0){\r\n                                    if(isSubscribed){\r\n                                        setPostsWithCoverUrl(temp)\r\n                                    }\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                    else{\r\n                        temp = [...temp, {...currentPost, coverUrl: ''}]\r\n                        count--\r\n                        if(count === 0){\r\n                            if(isSubscribed){\r\n                                setPostsWithCoverUrl(temp)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n\r\n            func()\r\n            \r\n            \r\n            return (\r\n                () => {\r\n                    isSubscribed = false\r\n                }\r\n            )\r\n        }, [posts]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                {\r\n                    postsWithCoverUrl.map(\r\n                        (post) => (\r\n                            <Col key={post._id} style={{margin: '20px 15px'}}>\r\n                                <Card\r\n                                    hoverable={true}\r\n                                    bordered={false}\r\n                                    style={{width:widthOfCard}}\r\n                                    actions={\r\n                                        displayMyPost?\r\n                                            [\r\n                                                <EditOutlined key=\"edit-post\" onClick={(e)=>{e.stopPropagation();onClickEdit(post);}} />,\r\n                                                <DeleteOutlined key=\"delete-post\" onClick={(e)=>{e.stopPropagation();onClickDelete(post._id);}} />\r\n                                            ]\r\n                                            :\r\n                                            [\r\n                                                favoriteIDs.includes(post._id)?\r\n                                                <StarTwoTone key=\"favorite-post-yellow\" twoToneColor=\"yellow\" onClick={(e)=>{e.stopPropagation();onClickStar(post._id);}}/>:\r\n                                                isAuth?\r\n                                                <StarOutlined key=\"favorite-post-gray\" onClick={(e)=>{e.stopPropagation();onClickStar(post._id);}}/>:\r\n                                                <Popconfirm\r\n                                                    title=\"You need to login to favorite a post. Do you want to login?\"\r\n                                                    onConfirm={(e) => {e.stopPropagation(); onConfirmToLogin()}}\r\n                                                    onCancel={(e)=>{e.stopPropagation();}}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <StarOutlined key=\"favorite-post-gray\" onClick={(e)=>{e.stopPropagation();}}/>\r\n                                                </Popconfirm>\r\n                                            ]\r\n                                        \r\n                                    }\r\n                                    cover={\r\n                                        <div style={{overflow: 'hidden', width: widthOfCard, height: widthOfCard, borderRadius: '10px'}}>\r\n                                            <img\r\n                                                style={{height: '100%', width: '100%', objectFit: 'cover'}}\r\n                                                alt=\"example\"\r\n                                                src={post.pictureKeyArray.length===0?'../no_image.jpg':post.coverUrl}\r\n                                            />\r\n                                        </div>\r\n                                    }\r\n                                    onClick={(e)=>onClickCard(post, e)}\r\n                                >\r\n                                    <div style={locationPriceContainerStyle}>\r\n                                        <div style={priceStyle}>\r\n                                            {`\\$${post.price}`}\r\n                                        </div>\r\n                                        <div style={locationStyle}>\r\n                                            {'Gainesville, FL 32607'}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div style={{clear: 'both'}}></div>\r\n                                    <Meta\r\n                                        style={{marginLeft: '0px'}}\r\n                                        avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\r\n                                        title={post.title}\r\n                                        description={\r\n                                            Math.floor((Date.now() - Date.parse(post.modifiedTimestamp))/1000/3600)==0?\r\n                                            `${Math.floor((Date.now() - Date.parse(post.modifiedTimestamp))/1000/60)} minutes ago`:\r\n                                            Math.floor((Date.now() - Date.parse(post.modifiedTimestamp))/1000/3600/24)==0?\r\n                                            `${Math.floor((Date.now() - Date.parse(post.modifiedTimestamp))/1000/3600)} hours ago`:\r\n                                            `${Math.floor((Date.now() - Date.parse(post.modifiedTimestamp))/1000/3600/24)} days ago`\r\n                                        }\r\n                                    />\r\n                                </Card>\r\n                            </Col>\r\n                        )\r\n                    )\r\n                }\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React, {useEffect, useState} from 'react'\r\nimport { Card, Avatar } from 'antd';\r\nimport {S3_GET} from './S3'\r\n\r\nconst profilePictureStyle = {\r\n    width: '90%',\r\n    height: 'auto',\r\n    marginLeft: '5%',\r\n\r\n    borderWidth: '2px',\r\n    borderStyle: 'solid',\r\n    borderColor: '#E0E0E0',\r\n    marginBottom: '10px'\r\n}\r\n\r\nconst contactInfoHeadingTextStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    fontWeight: 600,\r\n    fontSize: '15pt',\r\n    textAlign: 'center',\r\n    marginBottom: '15px'\r\n}\r\n\r\nconst contactInfoStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    color: '#A0A0A0',\r\n    textAlign: 'left',\r\n    fontSize: '15pt',\r\n    marginTop: '10px'\r\n}\r\n\r\nconst ContactInfoCard = ({user, post, isInfoVisible}) => {\r\n\r\n    const [profilePictureURL, setProfilePictureURL] = useState(\"\")\r\n\r\n    useEffect(\r\n        () => {\r\n            if(user.profilePictureKey !== \"\"){\r\n                S3_GET(user.profilePictureKey)\r\n                    .then(\r\n                        (url) => {\r\n                            setProfilePictureURL(url)\r\n                        }\r\n                    )\r\n            }\r\n        }, [user]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Card style={{ width: '100%', marginTop: 16 }} loading={!isInfoVisible} hoverable={true}>\r\n                <div style={contactInfoHeadingTextStyle}>\r\n                    Contact Information\r\n                </div>\r\n                {\r\n                    user.profilePictureKey===\"\"?\r\n                    <Avatar size=\"default\" src={'./default_profile_pic.jpg'} style={profilePictureStyle} />:\r\n                    <Avatar size=\"default\" src={profilePictureURL} style={profilePictureStyle} />\r\n                }\r\n                <div style={contactInfoStyle}>\r\n                    Name: {user.firstName} {user.lastName}\r\n                </div>\r\n                <div style={contactInfoStyle}>\r\n                    {`Email: ${post.email===''?'N/A':post.email}`}\r\n                </div>\r\n                <div style={contactInfoStyle}>\r\n                    {`WeChat ID: ${post.wechatID===''?'N/A':post.wechatID}`}\r\n                </div>\r\n                <div style={contactInfoStyle}>\r\n                    {`Phone Number: ${post.phoneNum===''?'N/A':post.phoneNum}`}\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactInfoCard\r\n","import React, {useState, useEffect} from 'react'\r\nimport { Divider, Row, Col, Image, Popconfirm } from 'antd';\r\nimport { StarOutlined, DeleteOutlined, StarTwoTone, EditOutlined } from '@ant-design/icons';\r\n\r\nimport ContactInfoCard from './ContactInfoCard'\r\n\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST} from './S3'\r\nimport auth from '../auth/auth';\r\n\r\n// title | actions\r\nconst headerContainerStyle = {\r\n    // borderStyle: 'solid',\r\n    // borderWidth: '2px',\r\n    // borderColor: 'black',\r\n\r\n    width: '100%',\r\n    overflow: 'hidden'\r\n}\r\n\r\nconst titleStyle = {\r\n    fontSize: '20pt',\r\n    fontWeight: '700',\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    float: 'left'\r\n}\r\n\r\nconst actionIconContainerStyle = {\r\n    float: 'right'\r\n}\r\n\r\nconst actionIconStyle = {\r\n    fontSize: '30px',\r\n    borderStyle: 'solid',\r\n    borderColor: '#A0A0A0',\r\n    borderWidth: '2px',\r\n    borderRadius: '10px',\r\n    margin: '3px',\r\n    padding: '3px'\r\n}\r\n\r\n// contact info | images\r\nconst contactInfoLayout = {\r\n    xs: {\r\n        span: 24,\r\n    },\r\n    sm: {\r\n        span: 24,\r\n    },\r\n    md: {\r\n        span: 24,\r\n    },\r\n    lg: {\r\n        span: 8,\r\n    }\r\n}\r\n\r\nconst pictureWallLayout = {\r\n    xs: {\r\n        span: 24,\r\n    },\r\n    sm: {\r\n        span: 24,\r\n    },\r\n    md: {\r\n        span: 24,\r\n    },\r\n    lg: {\r\n        span: 16,\r\n    }\r\n}\r\n\r\n// location, price, start date, end date | description\r\nconst otherInfoLayout = {\r\n    xs: {\r\n        span: 24,\r\n    },\r\n    sm: {\r\n        span: 24,\r\n    },\r\n    md: {\r\n        span: 24,\r\n    },\r\n    lg: {\r\n        span: 8,\r\n    }\r\n}\r\n\r\nconst descriptionLayout = {\r\n    xs: {\r\n        span: 24,\r\n    },\r\n    sm: {\r\n        span: 24,\r\n    },\r\n    md: {\r\n        span: 24,\r\n    },\r\n    lg: {\r\n        span: 16,\r\n    }\r\n}\r\n\r\nconst otherInfoStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    color: 'black',\r\n    textAlign: 'left',\r\n    fontSize: '15pt',\r\n    marginTop: '10px'\r\n}\r\n\r\nconst headingTextStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    fontWeight: 600,\r\n    fontSize: '15pt',\r\n    textAlign: 'center',\r\n    marginBottom: '15px'\r\n}\r\n\r\n\r\nconst dividerLayout = {\r\n    span: 24\r\n}\r\n\r\n\r\n\r\nconst ProductDetailPage = ({post, displayMyPost, isFavorite, onClickStar, user, onClickEdit, onClickDelete, routerProps, isAuth}) => {\r\n\r\n    const onConfirmToLogin = () => {\r\n        routerProps.history.push('./login')\r\n    }\r\n\r\n    const [pictureUrlArray, setPictureUrlArray] = useState([])\r\n    \r\n\r\n    useEffect(\r\n        async () => {\r\n            if(post.pictureKeyArray.length === 0){\r\n                setPictureUrlArray([])\r\n            }\r\n            else{\r\n                for(const key in post.pictureKeyArray){\r\n                    const currentKey = post.pictureKeyArray[key]\r\n                    await S3_GET(currentKey).then(\r\n                        (url) => {\r\n                            setPictureUrlArray(prevState=>([...prevState, url]))\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n            \r\n        }, [post]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <div style={headerContainerStyle}>\r\n\r\n                <div style={titleStyle}>\r\n                    {post.title}\r\n                </div>\r\n\r\n                <div style={actionIconContainerStyle}>\r\n                    {\r\n                         displayMyPost?\r\n                        (\r\n                            [\r\n                                <EditOutlined style={actionIconStyle} key=\"edit-post\" onClick={()=>onClickEdit(post)} />,\r\n                                <DeleteOutlined style={actionIconStyle} key=\"delete-post\" onClick={()=>onClickDelete(post._id)} />\r\n                            ]\r\n                        ):\r\n                        (\r\n                            isFavorite?\r\n                            <StarTwoTone style={actionIconStyle} key=\"favorite-post-yellow\" twoToneColor=\"yellow\" onClick={()=>onClickStar(post._id)}/>:\r\n                            isAuth?\r\n                            <StarOutlined style={actionIconStyle} key=\"favorite-post-gray\" onClick={()=>onClickStar(post._id)}/>:\r\n                            <Popconfirm\r\n                                title=\"You need to login to favorite a post. Do you want to login?\"\r\n                                onConfirm={onConfirmToLogin}\r\n                                okText=\"Yes\"\r\n                                cancelText=\"No\"\r\n                            >\r\n                                <StarOutlined style={actionIconStyle} key=\"favorite-post-gray\" />\r\n                            </Popconfirm>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                <div style={{clear: 'both'}}></div>\r\n\r\n            </div>\r\n            \r\n            <Row>\r\n                <Col {...dividerLayout} >\r\n                    <Divider orientation=\"left\" style={{backgroundColor: '#E0E0E0', marginTop: '2px'}}>\r\n                    </Divider>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row gutter='16'>\r\n                <Col {...contactInfoLayout}>\r\n                    <ContactInfoCard user={user} post={post} isInfoVisible={true}/>\r\n                </Col>\r\n                <Col {...pictureWallLayout}>\r\n                    <div style={headingTextStyle}>\r\n                        Pictures\r\n                    </div>\r\n                    <Image.PreviewGroup>\r\n                        {\r\n                            pictureUrlArray.length===0?\r\n                            <Image\r\n                                width=\"250px\"\r\n                                height=\"250px\"\r\n                                style={{objectFit: 'contain', padding: '10px'}}\r\n                                src='../no_image.jpg'\r\n                            />:\r\n                            pictureUrlArray.map(\r\n                                (url, index) => (\r\n                                    <Image\r\n                                        key={index}\r\n                                        width=\"250px\"\r\n                                        height=\"250px\"\r\n                                        style={{objectFit: 'contain', padding: '10px'}}\r\n                                        src={url}\r\n                                    />\r\n                                )\r\n                            )\r\n                        }\r\n                    </Image.PreviewGroup>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col {...dividerLayout} >\r\n                    <Divider orientation=\"left\" style={{backgroundColor: '#E0E0E0', marginTop: '2px'}}>\r\n                    </Divider>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* location, price, start date, end date | description */}\r\n            <Row gutter='16'>\r\n                <Col {...descriptionLayout}>\r\n                    <div style={headingTextStyle}>\r\n                        Detailed Description\r\n                    </div>\r\n                    <div style={otherInfoStyle}>\r\n                        {post.description}\r\n                    </div>\r\n                </Col>\r\n\r\n                <Col {...otherInfoLayout}>\r\n                    <div style={otherInfoStyle}>\r\n                        {`Type of post: ${post.typeOfPost}`}\r\n                    </div>\r\n                    <div style={otherInfoStyle}>\r\n                        {`Location: ${post.zipcode===''?'N/A':post.zipcode}`}\r\n                    </div>\r\n                    <div style={otherInfoStyle}>\r\n                        {`Price: \\$ ${post.price===''?'N/A':post.price}`}\r\n                    </div>\r\n                    <div style={otherInfoStyle}>\r\n                        {`Post start date: 3/1/2021`}\r\n                    </div>\r\n                    <div style={otherInfoStyle}>\r\n                        {`Post end date: 4/1/2021`}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductDetailPage\r\n","import { message, Modal } from 'antd';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Cards from './Cards'\r\n\r\nimport ProductDetailPage from './ProductDetailPage'\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst MainPage = ({isAuthenticated=false, user, setUser, routerProps}) => {\r\n\r\n    const [posts, setPosts] = useState([])\r\n    const [isProductDetailVisible, setIsProductDetailVisible] = useState(false)\r\n    const [selectedPost, setSelectedPost] = useState('')\r\n    const [selectedPostUserInfo, setSelectedPostUserInfo] = useState('')\r\n\r\n    useEffect(\r\n        () => {\r\n            let isSubscribed = true\r\n            const getPosts = async()=>{\r\n                axios.get(base_ + '/api/get-post-by-time?startIndex=0&numberOfPosts=20&order=new')\r\n                    .then(\r\n                        (res) => {\r\n                            console.log(res)\r\n                            if(res.data.code===1){\r\n                                message.error(res.data.message)\r\n                                if (isSubscribed){\r\n                                    setPosts([])\r\n                                }\r\n                            }\r\n                            else{\r\n                                if (isSubscribed){\r\n                                    setPosts(res.data.data)\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n                    )\r\n                    .catch(\r\n                        (err) => {\r\n                            console.log(err)\r\n                            if (isSubscribed){\r\n                                setPosts([])\r\n                            }\r\n                            message.error(\"Something went wrong\")\r\n                        }\r\n                    )\r\n                \r\n            }\r\n\r\n            getPosts()\r\n\r\n            return (\r\n                () => {\r\n                    isSubscribed = false\r\n                }\r\n            )\r\n\r\n        }, []\r\n    )\r\n\r\n    const addSavedPosts = async (postID) => {\r\n        const updatedUser = {savedPosts: [...user.savedPosts, postID]}\r\n\r\n        axios.put(base_ + '/api/update-user-info', {newUser: updatedUser})\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(`Fail to update saved posts: ${res.data.message}`)\r\n                    }\r\n                    else{\r\n                        setUser({...user, savedPosts: res.data.data.savedPosts})\r\n                        message.success(\"Post saved!\")\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    console.log(err)\r\n                    message.error('Fail to update saved posts.')\r\n                }\r\n            )\r\n    }\r\n\r\n    const deleteSavedPosts = async (postID) => {\r\n        var updatedSavedPosts = user.savedPosts\r\n        updatedSavedPosts.splice(user.savedPosts.indexOf(postID),1)\r\n        const updatedUser = {savedPosts: updatedSavedPosts}\r\n\r\n        axios.put(base_ + '/api/update-user-info', {newUser: updatedUser})\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(`Fail to update saved posts: ${res.data.message}`)\r\n                    }\r\n                    else{\r\n                        setUser({...user, savedPosts: res.data.data.savedPosts})\r\n                        message.success(\"Post unsaved!\")\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    console.log(err)\r\n                    message.error('Fail to update saved posts.')\r\n                }\r\n            )\r\n    }\r\n\r\n    const onClickStar = (postID) => {\r\n        if(user.savedPosts.includes(postID)){\r\n            deleteSavedPosts(postID)\r\n        }\r\n        else{\r\n            addSavedPosts(postID)\r\n        }\r\n    }\r\n\r\n    const onClickCard = async (post, e) => {\r\n        setSelectedPost(post)\r\n        setSelectedPostUserInfo(post.simplifiedUserInfo)\r\n        setIsProductDetailVisible(true)\r\n    }\r\n\r\n    const onCloseProductDetail = () => {\r\n        setIsProductDetailVisible(false)\r\n        setSelectedPost('')\r\n        setSelectedPost('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                posts.length===0?\r\n                'There is no post now. Create the first one!':\r\n                <Cards posts={posts} displayMyPost={false} favoriteIDs={isAuthenticated?user.savedPosts:[]} onClickStar={onClickStar} onClickCard={onClickCard} routerProps={routerProps} isAuth={isAuthenticated}></Cards>\r\n            }\r\n\r\n            <Modal \r\n                title=\"Product Detail\" \r\n                visible={isProductDetailVisible}\r\n                onCancel={onCloseProductDetail}\r\n                footer={null}\r\n                width='70%'\r\n            >\r\n                <ProductDetailPage post={selectedPost} displayMyPost={false} isFavorite={isAuthenticated?user.savedPosts.includes(selectedPost._id):false} onClickStar={onClickStar} user={selectedPostUserInfo} routerProps={routerProps} />\r\n            </Modal>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage\r\n","import { Upload, Modal, message  } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST} from './S3'\r\n\r\nfunction getBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nconst itemCounterStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    position: 'absolute',\r\n    top: '95%',\r\n    left: '98%',\r\n    transform: 'translate(-100%, -100%)',\r\n    textAlign: 'Right', \r\n    fontSize: '13pt'\r\n};\r\n\r\nconst pictureSizeStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '2%',\r\n    textAlign: 'Left', \r\n    fontSize: '13pt'\r\n}\r\n\r\nconst uploadButton = (\r\n    <div>\r\n        <PlusOutlined />\r\n        <div style={{  marginTop: 8 }}>Upload</div>\r\n    </div>\r\n);\r\n\r\nconst ImageUploader = ({maxNumberOfPictures, pictureKeyArray, setPictureKeyArray, fileList, setFileList}) => {\r\n\r\n    const [previewVisible, setPreviewVisible] = useState(false)\r\n    const [previewImage, setPreviewImage] = useState('')\r\n    const [previewTitle, setPreviewTitle] = useState('')\r\n    const [currentNumberOfPictures, setCurrentNumberOfPictures] = useState(pictureKeyArray.length)\r\n\r\n    const handleCancel = () => setPreviewVisible(false);\r\n\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n\r\n        setPreviewVisible(true)\r\n        setPreviewImage(file.url || file.preview)\r\n        setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\r\n    };\r\n\r\n    const handleChange = ({ fileList, file }) => {\r\n        if(file.type.substring(0, file.type.indexOf('/'))!=='image'){\r\n            message.error(\"You can only upload images\")\r\n            setTimeout(() => {\r\n                setFileList(fileList.filter(\r\n                    file1 => file1.name !== file.name\r\n                ))\r\n                setCurrentNumberOfPictures(fileList.length)\r\n                setPictureKeyArray(pictureKeyArray.filter(key => key.substring(key.lastIndexOf('/') + 1)!==file.uid))\r\n            }, 1000);\r\n        }\r\n\r\n        if(file.size>MAX_CONTENT_LEN){\r\n            message.error(\"Single image cannot exceed 10MB\")\r\n            setTimeout(() => {\r\n                setFileList(fileList.filter(\r\n                    file1 => file1.name !== file.name\r\n                ))\r\n                setCurrentNumberOfPictures(fileList.length)\r\n                setPictureKeyArray(pictureKeyArray.filter(key => key.substring(key.lastIndexOf('/') + 1)!==file.uid))\r\n            }, 1000);\r\n        }\r\n        \r\n        setFileList([...fileList])\r\n        setCurrentNumberOfPictures(fileList.length)\r\n    }\r\n\r\n    const handleRemove = (file) => {\r\n        console.log(\"removing: \", file.uid)\r\n        console.log(pictureKeyArray[0].substring(pictureKeyArray[0].lastIndexOf('/') + 1))\r\n        setPictureKeyArray(pictureKeyArray.filter(key => key.substring(key.lastIndexOf('/') + 1)!==file.uid))\r\n    }\r\n\r\n    const handleBeforeUpload = (file) => {\r\n        setPictureKeyArray([...pictureKeyArray, `ProductDetailPhotos/${file.uid}`])\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: 'left'}}>\r\n            <Upload\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onPreview={handlePreview}\r\n                onChange={handleChange}\r\n                onRemove={handleRemove}\r\n                beforeUpload={handleBeforeUpload}\r\n                // accept=\"image/*\"\r\n                // maxCount={maxNumberOfPictures}\r\n            >\r\n                {fileList.length >= maxNumberOfPictures ? null : uploadButton}\r\n            </Upload>\r\n            <span style={pictureSizeStyle}>(Each picture should be less than 10MB)</span>\r\n            <span style={itemCounterStyle}>{`${currentNumberOfPictures}/${maxNumberOfPictures}`}</span>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title={previewTitle}\r\n                footer={null}\r\n                onCancel={handleCancel}\r\n                width={800}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUploader\r\n","import React, { useState } from 'react';\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST} from './S3'\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Divider,\r\n    InputNumber,\r\n    message,\r\n    Select,\r\n  } from 'antd';\r\n\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport ImageUploader from './ImageUploader'\r\nimport axios from 'axios';\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 8,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n                span: 24,\r\n        },\r\n        sm: {\r\n                span: 8,\r\n        },\r\n    },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24, \r\n        },\r\n    },\r\n}\r\n\r\nconst dividerLayout = {\r\n    xs: {\r\n        span: 24\r\n    },\r\n    sm: {\r\n        span: 12\r\n    },\r\n}\r\n\r\nconst CreatePostPage = ({user}) => {\r\n    const [form] = Form.useForm();\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [durationDays, setDurationDays] = useState('')\r\n    const [typeOfPost, setTypeOfPost] = useState('')\r\n\r\n    const [zipcode, setZipcode] = useState('')\r\n    const [price, setPrice] = useState(0)\r\n\r\n    const [pictureKeyArray, setPictureKeyArray] = useState([])\r\n    const [fileList, setFileList] = useState([])\r\n\r\n    const [email, setEmail] = useState(user.email)\r\n    const [wechatID, setWechatID] = useState(user.wechatID)\r\n    const [phoneNum, setPhoneNum] = useState(user.phoneNum)\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    const uploadAllPictures = () => {\r\n        return new Promise(\r\n            async (resolve, reject) => {\r\n                var count = fileList.length\r\n                for(let index = 0; index < fileList.length; index ++){\r\n                    const file = fileList[index]\r\n                    try{\r\n                        const signed = await S3_GET_SIGNED_POST(file, 'ProductDetailPhotos')\r\n                        await S3_UPLOAD(signed, fileList, index)\r\n                        count--\r\n                        if(count===0){\r\n                            resolve()\r\n                        }\r\n                        \r\n                    }\r\n                    catch{\r\n                        reject()\r\n                    }\r\n                }\r\n                // resolve()\r\n            }\r\n        )\r\n    }\r\n\r\n    const onFinish = async () => {\r\n\r\n        message.loading({content: \"Uploading Pictures\", key: \"updatable\"})\r\n        await uploadAllPictures()\r\n            .then(\r\n                async () => {\r\n                    const newPost = {\r\n                        title: title,\r\n                        description: description,\r\n                        durationDays: durationDays,\r\n                        typeOfPost: typeOfPost,\r\n                        zipcode: zipcode,\r\n                        price: price,\r\n                        pictureKeyArray: pictureKeyArray,\r\n                        email: email.toLowerCase(),\r\n                        wechatID: wechatID.toLowerCase(),\r\n                        phoneNum: phoneNum\r\n                    }\r\n\r\n                    axios.post(base_ + '/api/add-post', {newPost: newPost})\r\n                        .then(\r\n                            (res) => {\r\n                                if(res.data.code===1){\r\n                                    message.error({content: `Fail to create post: ${res.data.message}`, key: \"updatable\", duration: 2})\r\n                                }\r\n                                else{\r\n                                    setTitle('')\r\n                                    setDescription('')\r\n                                    setDurationDays('')\r\n                                    setTypeOfPost('')\r\n                                    setZipcode('')\r\n                                    setPrice('')\r\n                                    setPictureKeyArray([])\r\n                                    setFileList([])\r\n                                    setEmail(user.email)\r\n                                    setWechatID(user.wechatID)\r\n                                    setPhoneNum(user.phoneNum)\r\n                            \r\n                                    form.resetFields();\r\n\r\n                                    message.success({content: \"Post Created!\", key: \"updatable\", duration: 2})\r\n                                }\r\n                            }\r\n                        )\r\n                        .catch(\r\n                            (err) => {\r\n                                console.log(err)\r\n                                message.error({content: \"Fail to create post\", key: \"updatable\", duration: 2})\r\n                            }\r\n                        )\r\n            \r\n                    \r\n                }\r\n            )\r\n            .catch(\r\n                () => {\r\n                    message.error({content: \"Fail to upload pictures\", key: \"updatable\", duration: 2})\r\n                }\r\n            )\r\n\r\n\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        setTypeOfPost(value)\r\n        form.setFieldsValue({\"type-of-post\": value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Create Post</h1>\r\n            <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                name=\"createPost\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    \"email\": user.email,\r\n                    \"wechat-id\": user.wechatID,\r\n                    \"phone\": user.phoneNum,\r\n                    \"price\": price\r\n                }}\r\n            >\r\n\r\n                <Row justify='center'>\r\n                    <Col {...dividerLayout}>\r\n                        <Divider orientation=\"left\">\r\n                            General Post Information&nbsp;\r\n                            <Tooltip title=\"Enter the basic post informtion. These fields are required.\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </Divider>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Form.Item\r\n                    name=\"title\"\r\n                    label=\"Post Title\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input the post title!',\r\n                        },\r\n                    ]\r\n                    }\r\n                >\r\n                    <Input value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"description\"\r\n                    label=\"Post Desceiption\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input the post descroption!',\r\n                        },\r\n                    ]\r\n                    }\r\n                >\r\n                    <Input.TextArea value={description} rows={4} onChange={(e) => setDescription(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    name=\"duration\"\r\n                    label={\r\n                        <span>\r\n                            Post Duration (Days)&nbsp;\r\n                            <Tooltip title=\"Enter how many days you expect your post to stay active. The maximum duration is 30 days. After these many days, your post will be automatically deleted. You can renew the duration after posting by editing and re-uploading your post if you need to post longer.\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    } \r\n                    rules={\r\n                        [\r\n                            {\r\n                                type: 'number', \r\n                                min: 1, \r\n                                max: 30, \r\n                                message: 'Duration needs to be a number between 1 and 30!'\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input the duration of your post!',\r\n                            },\r\n                        ]\r\n                    }\r\n                >\r\n                    <InputNumber placeholder=\"Enter a number between 1 and 30, see question mark for more detail\" value={durationDays} onChange={(value) => setDurationDays(value)} style={{ width: '100%' }}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name= \"type-of-post\"\r\n                    label=\"Type of Your Post\"\r\n                    hasFeedback\r\n                    rules={\r\n                        [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please select the post type!',\r\n                            },\r\n                        ]\r\n                    }\r\n                >\r\n                    <Row justify='start'>\r\n                        <Col>\r\n                            <Select style={{ width: 200 }} onChange={handleChange}>\r\n                                <Option value=\"Selling\">Selling</Option>\r\n                                <Option value=\"Buying\">Buying</Option>\r\n                                <Option value=\"Subleasing\">Subleasing</Option>\r\n                                <Option value=\"Other\">Other</Option>\r\n                            </Select>\r\n                        </Col>\r\n                    </Row>\r\n                    \r\n                </Form.Item>\r\n\r\n                <Row justify='center'>\r\n                    <Col {...dividerLayout}>\r\n                        <Divider orientation=\"left\">\r\n                            Additional Post Information&nbsp;\r\n                            <Tooltip title=\"Enter addition post information to give more details about your post.\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </Divider>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Form.Item\r\n                    name=\"zipcode\"\r\n                    label={\r\n                        <span>\r\n                            ZIP Code&nbsp;\r\n                            <Tooltip title=\"Other users can use the ZIP Code to see the approximate location of the post.\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                    rules={\r\n                        [\r\n                            ()=>({\r\n                                validator(_, value){\r\n                                    if(value==='' || value===undefined){\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    else if(!(/^\\d{5}(-\\d{4})?$/.test(value))){\r\n                                        return Promise.reject('Please enter a valid US ZIP Code!');\r\n                                    }\r\n                                    else{\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                }\r\n                            })\r\n                        ]\r\n                    }\r\n                >\r\n                    <Input value={zipcode} onChange={(e) => setZipcode(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"price\"\r\n                    label=\"Price\"\r\n                    rules={\r\n                        [\r\n                            {\r\n                                type: 'number',\r\n                                message: 'Price needs to be a number!'\r\n                            }\r\n                            \r\n                        ]\r\n                    }\r\n                >\r\n                    <InputNumber \r\n                        formatter={\r\n                            value => {\r\n                                return (value==0?\r\n                                \"$ 0\":\r\n                                `$ ${value}`)\r\n                            }\r\n                        }\r\n                        style={{ width: '100%' }}\r\n                        value={price} \r\n                        onChange={\r\n                            (value) => {\r\n                                if(value==null){\r\n                                    setPrice(0)\r\n                                }\r\n                                else{\r\n                                    setPrice(value)\r\n                                }\r\n                                \r\n                            }\r\n                        }\r\n                        placeholder=\"$ 0\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"pictures\"\r\n                    label={\r\n                        <span>\r\n                            Pictures&nbsp;\r\n                            <Tooltip title=\"The first picture will be used as the cover picture.\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                >\r\n                    <div style={{borderWidth: '1px', borderColor: '#E0E0E0', borderStyle: 'solid', padding: '40px'}}>\r\n                        <ImageUploader key={value} maxNumberOfPictures='9' pictureKeyArray={pictureKeyArray} setPictureKeyArray={setPictureKeyArray} fileList={[...fileList]} setFileList={setFileList}></ImageUploader>\r\n                    </div>\r\n                </Form.Item>\r\n\r\n                <Row justify='center'>\r\n                    <Col {...dividerLayout}>\r\n                        <Divider orientation=\"left\">\r\n                            Contact Information&nbsp;\r\n                            <Tooltip title=\"Enter your contact information here so that they are only visible to logged-in users. If you put your contact information in the description, it would be visible to everyone.\">\r\n                                <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </Divider>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Form.Item\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                    rules={[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'Please input a valid E-mail!'\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"wechat-id\"\r\n                    label=\"WeChat ID\"\r\n                >\r\n                    <Input value={wechatID} onChange={(e) => setWechatID(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    label=\"Phone Number\"\r\n                >\r\n                    <Input value={phoneNum} onChange={(e) => setPhoneNum(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Create Post\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePostPage\r\n","import React, { useState } from 'react'\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    message,\r\n  } from 'antd';\r\nimport {PasswordInput} from 'antd-password-input-strength'\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24,\r\n        },\r\n        md: {\r\n            span: 24,\r\n        },\r\n        lg: {\r\n            span: 6,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24,\r\n        },\r\n        md: {\r\n            span: 24,\r\n        },\r\n        lg: {\r\n            span: 12,\r\n        },\r\n    },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        md: {\r\n            span: 24,\r\n        },\r\n        lg: {\r\n            span: 24, \r\n        },\r\n    },\r\n}\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst ChangePasswordPage = ({user, setUser}) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [oldPassword, setOldPassword] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirm, setConfirm] = useState('')\r\n\r\n    const onFinish = async () =>{\r\n\r\n        const pwds = {pwd: password, oldPwd: oldPassword}\r\n\r\n        axios.put(base_ + '/api/change-password', pwds)\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(res.data.message)\r\n                    }\r\n                    else{\r\n                        setOldPassword('')\r\n                        setPassword('')\r\n                        setConfirm('')\r\n                        message.success(res.data.message)\r\n                \r\n                        form.resetFields();\r\n                        \r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    message.error(\"Something went wrong!\")\r\n                    console.log(err)\r\n                }\r\n            )\r\n            \r\n        }\r\n\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Change Password</h1>\r\n            <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                name=\"change-password\"\r\n                onFinish={onFinish}\r\n            >\r\n\r\n                <Form.Item\r\n                    name=\"old-password\"\r\n                    label=\"Old Password\"\r\n                    hasFeedback\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please enter your old password!',\r\n                        }\r\n                    ]}\r\n                >\r\n                    <Input.Password value={oldPassword} onChange={(e) => setOldPassword(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label={\r\n                        <span>\r\n                            New Password&nbsp;\r\n                            <Tooltip title=\"Password should be at least 6 characters long. You should include numbers, upper-case letters, and lower-case letters in your password.\">\r\n                            <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your new password!',\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                                let hasNum = /\\d/.test(value);\r\n                                let hasUpper = /[A-Z]/.test(value);\r\n                                let hasLower = /[a-z]/.test(value);\r\n                                let hasSpace = / /.test(value)\r\n                                if(hasSpace){\r\n                                    return Promise.reject('Password cannot contain space!');\r\n                                }\r\n                                else if (value.length < 6) {\r\n                                    return Promise.reject('Password should be at least 6 characters long!');\r\n                                }\r\n                                else if(!hasNum || !hasUpper || !hasLower){\r\n                                    return Promise.reject('Please include numbers, upper-case letters, lower-case letters in your password!');\r\n                                }\r\n                                else{\r\n                                    return Promise.resolve();\r\n                                }\r\n                                \r\n                            },\r\n                        }),\r\n                    ]}    \r\n                    hasFeedback\r\n                >\r\n                    <PasswordInput \r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        settings={{\r\n                            colorScheme: {\r\n                                levels: [\"#ff4033\", \"#fe940d\", \"#ffd908\", \"#cbe11d\", \"#6ecc3a\"],\r\n                                noLevel: \"lightgrey\"\r\n                            },\r\n                            height: 7,\r\n                            alwaysVisible: true\r\n                        }}\r\n                        inputProps={{\r\n                            size: 'medium'\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"confirm\"\r\n                    label=\"Confirm New Password\"\r\n                    hasFeedback\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please confirm your new password!',\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                            if (!value || password === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n\r\n                            return Promise.reject('The two new passwords that you entered do not match!');\r\n                            },\r\n                        }),\r\n                    ]}\r\n                >\r\n                    <Input.Password value={confirm} onChange={(e) => setConfirm(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangePasswordPage\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    message,\r\n} from 'antd';\r\nimport axios from 'axios';\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        sm: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24,\r\n        },\r\n        md: {\r\n            span: 24,\r\n        },\r\n        lg: {\r\n            span: 6,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        sm: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24,\r\n        },\r\n        md: {\r\n            span: 24,\r\n        },\r\n        lg: {\r\n            span: 12,\r\n        },\r\n    },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        md: {\r\n            span: 24,\r\n        },\r\n        lg: {\r\n            span: 24, \r\n        },\r\n    },\r\n}\r\n\r\nconst EditContactInfoPage = ({user, setUser}) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [wechatID, setWechatID] = useState(user.wechatID)\r\n    const [phoneNum, setPhoneNum] = useState(user.phoneNum)\r\n\r\n    const onFinish = async () =>{\r\n        const newUser = {wechatID: wechatID, phoneNum: phoneNum}\r\n\r\n        axios.put(base_ + '/api/update-user-info', {newUser: newUser})\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(`Fail to update the contact info: ${res.data.message}`)\r\n                    }\r\n                    else{\r\n                        const data = res.data.data\r\n                        if(data.wechatID===newUser.wechatID && data.phoneNum===newUser.phoneNum){\r\n                            setUser({...user, wechatID: data.wechatID, phoneNum: data.phoneNum})\r\n                            message.success('Successfully updated your contact info!')\r\n                        }\r\n                        else{\r\n                            message.error('Update failed, please try again or contach a CSA IT department member!')\r\n                        }\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    console.log(err)\r\n                    message.error('Fail to update the contact info.')\r\n                }\r\n            )\r\n\r\n        \r\n\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Edit Contact Information</h1>\r\n\r\n            <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                name=\"change-contact-info\"\r\n                onFinish={onFinish}\r\n                initialValues={{\r\n                    [\"wechat-id\"]: user.wechatID,\r\n                    [\"phone\"]: user.phoneNum\r\n                }}\r\n            >\r\n\r\n                <Form.Item\r\n                    name=\"wechat-id\"\r\n                    label=\"WeChat ID\"\r\n                >\r\n                    <Input value={wechatID} onChange={(e) => setWechatID(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"phone\"\r\n                    label=\"Phone Number\"\r\n                >\r\n                    <Input value={phoneNum} onChange={(e) => setPhoneNum(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditContactInfoPage\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Divider,\r\n    InputNumber,\r\n    Modal,\r\n    message,\r\n    Select\r\n  } from 'antd';\r\n\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport ImageUploader from './ImageUploader'\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST, S3_DELETE_BY_KEY, S3_GET_OBJECT_TYPE} from './S3'\r\nimport axios from 'axios';\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 6,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n                span: 24,\r\n        },\r\n        sm: {\r\n                span: 12,\r\n        },\r\n    },\r\n};\r\n\r\nconst dividerLayout = {\r\n    xs: {\r\n        span: 24\r\n    },\r\n    sm: {\r\n        span: 20\r\n    },\r\n}\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst EditPostPage = ({post, isEditPostVisible, setIsEditPostVisible}) => {\r\n\r\n    const [fileList, setFileList] = useState([])\r\n\r\n    useEffect(\r\n        async () => {\r\n            var array = []\r\n            var count = post.pictureKeyArray.length\r\n            for(const key in post.pictureKeyArray){\r\n                await S3_GET_OBJECT_TYPE(post.pictureKeyArray[key])\r\n                    .then(\r\n                        (type) => {\r\n                            S3_GET(post.pictureKeyArray[key])\r\n                                .then(\r\n                                    (url) => {\r\n                                        array = [...array, {\r\n                                            uid: post.pictureKeyArray[key].substring(post.pictureKeyArray[key].lastIndexOf('/')+1),\r\n                                            name: post.pictureKeyArray[key].substring(post.pictureKeyArray[key].lastIndexOf('/')+1),\r\n                                            status: 'done',\r\n                                            url: url,\r\n                                            type: type\r\n                                        }]\r\n                                        count--\r\n                                        if(count===0){\r\n                                            console.log(\"arr: \", array)\r\n                                            setFileList(array)\r\n                                        }\r\n                                    }\r\n\r\n                                )\r\n                        }\r\n                    )\r\n                    .catch(\r\n                        (err) => {\r\n                            console.log(err)\r\n                            setFileList(array)\r\n                        }\r\n                    )\r\n            }\r\n            \r\n        },[]\r\n    )\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [title, setTitle] = useState(post.title)\r\n    const [description, setDescription] = useState(post.description)\r\n    const [durationDays, setDurationDays] = useState(post.durationDays)\r\n    const [typeOfPost, setTypeOfPost] = useState(post.typeOfPost)\r\n    const [zipcode, setZipcode] = useState(post.zipcode)\r\n    const [price, setPrice] = useState(post.price)\r\n\r\n    const [pictureKeyArray, setPictureKeyArray] = useState(post.pictureKeyArray)\r\n\r\n    const originalPictureKeyArray = post.pictureKeyArray\r\n\r\n    \r\n\r\n    const [email, setEmail] = useState(post.email)\r\n    const [wechatID, setWechatID] = useState(post.wechatID)\r\n    const [phoneNum, setPhoneNum] = useState(post.phoneNum)\r\n\r\n    const uploadAllPictures = () => {\r\n        return new Promise(\r\n            async (resolve, reject) => {\r\n                try{\r\n                    var count = fileList.length\r\n                    for(let index = 0; index < fileList.length; index ++){\r\n                        const file = fileList[index]\r\n                        if(!originalPictureKeyArray.includes(`ProductDetailPhotos/${file.uid}`)){\r\n                            const signed = await S3_GET_SIGNED_POST(file, 'ProductDetailPhotos')\r\n                            await S3_UPLOAD(signed, fileList, index)\r\n                        }\r\n                        count--\r\n                        if(count===0){\r\n                            resolve()\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n                catch{\r\n                    reject()\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const deleteAllOldPictures = () => {\r\n        return new Promise(\r\n            async (resolve, reject) => {\r\n                for(const key in originalPictureKeyArray){\r\n                    await S3_DELETE_BY_KEY(originalPictureKeyArray[key])\r\n                }\r\n                resolve()\r\n            }\r\n        )\r\n    }\r\n\r\n    const onFinish = async () => {\r\n        message.loading({content: \"Uploading Pictures\", key: \"updatable\"})\r\n        await uploadAllPictures()\r\n            .then(\r\n                async () => {\r\n                    const updatedPost = {\r\n                        ...post,\r\n                        title: title,\r\n                        description: description,\r\n                        durationDays: durationDays,\r\n                        typeOfPost: typeOfPost,\r\n                        zipcode: zipcode,\r\n                        price: price,\r\n                        pictureKeyArray: pictureKeyArray,\r\n                        email: email.toLowerCase(),\r\n                        wechatID: wechatID.toLowerCase(),\r\n                        phoneNum: phoneNum\r\n                    }\r\n\r\n                    axios.put(base_ + '/api/update-post', {updatedPost: updatedPost})\r\n                        .then(\r\n                            (res) => {\r\n                                if(res.data.code===1){\r\n                                    message.error({content: res.data.message, key: \"updatable\", duration: 2})\r\n                                }\r\n                                else{\r\n                                    message.success({content: \"Post updated!\", key: \"updatable\", duration: 2})\r\n                                }\r\n                            }\r\n                        )\r\n                        .catch(\r\n                            (err) => {\r\n                                console.log(err)\r\n                                message.error({content: \"Fail to update post\", key: \"updatable\", duration: 2})\r\n                            }\r\n                        )\r\n                }\r\n            )\r\n            .catch(\r\n                () => {\r\n                    message.error({content: \"Fail to update pictures\", key: \"updatable\", duration: 2})\r\n                }\r\n            )\r\n        \r\n\r\n        \r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        setTypeOfPost(value)\r\n        form.setFieldsValue({\"type-of-post\": value})\r\n    }\r\n\r\n    const onCloseEditPost = () => {\r\n        setIsEditPostVisible(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal \r\n                title=\"Edit Post\" \r\n                visible={isEditPostVisible}\r\n                onCancel={onCloseEditPost}\r\n                footer={null}\r\n                width='70%'\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    {...formItemLayout}\r\n                    name=\"createPost\"\r\n                    onFinish={onFinish}\r\n                    initialValues={{\r\n                        \"title\": post.title,\r\n                        \"description\": post.description,\r\n                        \"duration\": post.durationDays,\r\n                        \"type-of-post\": post.typeOfPost,\r\n                        \"zipcode\": post.zipcode,\r\n                        \"price\": post.price,\r\n                        \"email\": post.email,\r\n                        \"wechat-id\": post.wechatID,\r\n                        \"phone\": post.phoneNum\r\n                    }}\r\n                >\r\n\r\n                    <Row justify='center'>\r\n                        <Col {...dividerLayout}>\r\n                            <Divider orientation=\"left\">\r\n                                General Post Information&nbsp;\r\n                                <Tooltip title=\"Enter the basic post informtion. These fields are required.\">\r\n                                    <QuestionCircleOutlined />\r\n                                </Tooltip>\r\n                            </Divider>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Item\r\n                        name=\"title\"\r\n                        label=\"Post Title\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input the post title!',\r\n                            },\r\n                        ]\r\n                        }\r\n                    >\r\n                        <Input value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"description\"\r\n                        label=\"Post Desceiption\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input the post descroption!',\r\n                            },\r\n                        ]\r\n                        }\r\n                    >\r\n                        <Input.TextArea value={description} rows={4} onChange={(e) => setDescription(e.target.value)}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item \r\n                        name=\"duration\"\r\n                        label={\r\n                            <span>\r\n                                Post Duration (Days)&nbsp;\r\n                                <Tooltip title=\"Enter how many days you expect your post to stay active. The maximum duration is 30 days. After these many days, your post will be automatically deleted. You can renew the duration after posting if you need to post longer.\">\r\n                                    <QuestionCircleOutlined />\r\n                                </Tooltip>\r\n                            </span>\r\n                        } \r\n                        rules={\r\n                            [\r\n                                {\r\n                                    type: 'number', \r\n                                    min: 1, \r\n                                    max: 30, \r\n                                    message: 'Duration needs to be a number between 1 and 30!'\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please input the duration of your post!',\r\n                                },\r\n                            ]\r\n                        }\r\n                    >\r\n                        <InputNumber placeholder=\"Enter a number between 1 and 30, see question mark for more detail\" value={durationDays} onChange={(value) => setDurationDays(value)} style={{ width: '100%' }}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name= \"type-of-post\"\r\n                        label=\"Type of Your Post\"\r\n                        hasFeedback\r\n                        rules={\r\n                            [\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please select the post type!',\r\n                                },\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Row justify='start'>\r\n                            <Col>\r\n                                <Select defaultValue={post.typeOfPost} style={{ width: 200 }} onChange={handleChange}>\r\n                                    <Option value=\"Selling\">Selling</Option>\r\n                                    <Option value=\"Buying\">Buying</Option>\r\n                                    <Option value=\"Subleasing\">Subleasing</Option>\r\n                                    <Option value=\"Other\">Other</Option>\r\n                                </Select>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </Form.Item>\r\n\r\n                    <Row justify='center'>\r\n                        <Col {...dividerLayout}>\r\n                            <Divider orientation=\"left\">\r\n                                Additional Post Information&nbsp;\r\n                                <Tooltip title=\"Enter addition post information to give more details about your post.\">\r\n                                    <QuestionCircleOutlined />\r\n                                </Tooltip>\r\n                            </Divider>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Item\r\n                        name=\"zipcode\"\r\n                        label={\r\n                            <span>\r\n                                ZIP Code&nbsp;\r\n                                <Tooltip title=\"Other users can use the ZIP Code to see the approximate location of the post.\">\r\n                                    <QuestionCircleOutlined />\r\n                                </Tooltip>\r\n                            </span>\r\n                        }\r\n                        rules={\r\n                            [\r\n                                ()=>({\r\n                                    validator(_, value){\r\n                                        if(value==='' || value===undefined){\r\n                                            return Promise.resolve();\r\n                                        }\r\n                                        else if(!(/^\\d{5}(-\\d{4})?$/.test(value))){\r\n                                            return Promise.reject('Please enter a valid US ZIP Code!');\r\n                                        }\r\n                                        else{\r\n                                            return Promise.resolve();\r\n                                        }\r\n                                    }\r\n                                })\r\n                            ]\r\n                        }\r\n                    >\r\n                        <Input value={zipcode} onChange={(e) => setZipcode(e.target.value)}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"price\"\r\n                        label=\"Price\"\r\n                        rules={\r\n                            [\r\n                                {\r\n                                    type: 'number',\r\n                                    message: 'Price needs to be a number!'\r\n                                }\r\n                                \r\n                            ]\r\n                        }\r\n                    >\r\n                        <InputNumber \r\n                            formatter={\r\n                                value => {\r\n                                    return (value==0?\r\n                                    \"$ 0\":\r\n                                    `$ ${value}`)\r\n                                }\r\n                            }\r\n                            style={{ width: '100%' }}\r\n                            value={price} \r\n                            onChange={\r\n                                (value) => {\r\n                                    if(value==null){\r\n                                        setPrice(0)\r\n                                    }\r\n                                    else{\r\n                                        setPrice(value)\r\n                                    }\r\n                                    \r\n                                }\r\n                            }\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"pictures\"\r\n                        label={\r\n                            <span>\r\n                                Pictures&nbsp;\r\n                                <Tooltip title=\"The first picture will be used as the cover picture.\">\r\n                                    <QuestionCircleOutlined />\r\n                                </Tooltip>\r\n                            </span>\r\n                        }\r\n                    >\r\n                        <div style={{borderWidth: '1px', borderColor: '#E0E0E0', borderStyle: 'solid', padding: '40px'}}>\r\n                            <ImageUploader maxNumberOfPictures='9' pictureKeyArray={pictureKeyArray} setPictureKeyArray={setPictureKeyArray} fileList={fileList} setFileList={setFileList}></ImageUploader>\r\n                        </div>\r\n                    </Form.Item>\r\n\r\n                    <Row justify='center'>\r\n                        <Col {...dividerLayout}>\r\n                            <Divider orientation=\"left\">\r\n                                Contact Information&nbsp;\r\n                                <Tooltip title=\"Enter your contact information here so that they are only visible to logged-in users. If you put your contact information in the description, it would be visible to everyone.\">\r\n                                    <QuestionCircleOutlined />\r\n                                </Tooltip>\r\n                            </Divider>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Item\r\n                        name=\"email\"\r\n                        label=\"E-mail\"\r\n                        rules={[\r\n                            {\r\n                                type: 'email',\r\n                                message: 'Please input a valid E-mail!'\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"wechat-id\"\r\n                        label=\"WeChat ID\"\r\n                    >\r\n                        <Input value={wechatID} onChange={(e) => setWechatID(e.target.value)}/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"phone\"\r\n                        label=\"Phone Number\"\r\n                    >\r\n                        <Input value={phoneNum} onChange={(e) => setPhoneNum(e.target.value)}/>\r\n                    </Form.Item>\r\n                \r\n                    <Row justify='center'>\r\n                        <Col>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Update Post\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditPostPage\r\n","import React, {useEffect, useState} from 'react'\r\nimport { Avatar, Image, Divider, Row, Col, Layout, Menu, Modal, Upload, Tooltip, message  } from 'antd';\r\nimport Cards from './Cards'\r\nimport ChangePasswordPage from './ChangePasswordPage'\r\nimport EditContactInfoPage from './EditContactInfoPage'\r\nimport ProductDetailPage from './ProductDetailPage'\r\nimport EditPostPage from './EditPostPage'\r\nimport ImgCrop from 'antd-img-crop'\r\n\r\n\r\nimport {MAX_CONTENT_LEN, S3_GET, S3_UPLOAD, S3_DELETE, S3_GET_SIGNED_POST, S3_DELETE_BY_KEY, S3_UPLOAD_SINGLE_FILE} from './S3'\r\nimport axios from 'axios';\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\nconst { Sider } = Layout;\r\n\r\nconst profileContainerStyle = {\r\n    width: '80%',\r\n    margin: 'auto'\r\n}\r\n\r\nconst profileSideBarStyle = {\r\n    width: '20%',\r\n    float: 'left',\r\n    padding: '10px',\r\n    paddingTop: '40px'\r\n}\r\n\r\nconst profilePictureStyle = {\r\n    width: '90%',\r\n    height: 'auto',\r\n\r\n    borderWidth: '2px',\r\n    borderStyle: 'solid',\r\n    borderColor: '#E0E0E0',\r\n    marginBottom: '10px',\r\n\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst basicInfoStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    color: '#A0A0A0',\r\n    textAlign: 'left'\r\n}\r\n\r\nconst dividerLayout = {\r\n    span: 24\r\n}\r\n\r\nconst profileMainBodyStyle = {\r\n    width: '80%',\r\n    float: 'right',\r\n    padding: '10px'\r\n}\r\n\r\nconst defaultMenuKey = 1\r\n\r\nconst ProfilePage = ({user, setUser}) => {\r\n    const [myPosts, setMyPosts] = useState([])\r\n    const [mySavedPosts, setMySavedPosts] = useState([])\r\n    const [currentMenuKey, setCurrentMenuKey] = useState(defaultMenuKey)\r\n\r\n    const [sideBarWidth, setSideBarWidth] = useState(`${window.innerWidth>=992?\"20%\":\"100%\"}`)\r\n\r\n    const [selectedPostID, setSelectedPostID] = useState('')\r\n    const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);\r\n\r\n    const [isProductDetailVisible, setIsProductDetailVisible] = useState(false)\r\n    const [isEditPostVisible, setIsEditPostVisible] = useState(false)\r\n    const [selectedPost, setSelectedPost] = useState('')\r\n    const [selectedPostUserInfo, setSelectedPostUserInfo] = useState('')\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    const [profilePictureURL, setProfilePictureURL] = useState(\"\")\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            const getMyPosts = async()=>{\r\n                fetchMyPosts()\r\n                    .then(\r\n                        (postsFromServer) => {\r\n                            setMyPosts(postsFromServer)\r\n                        }\r\n                    )\r\n                \r\n            }\r\n\r\n            getMyPosts()\r\n\r\n            const getMySavedPosts = async()=>{\r\n                var temp=[]\r\n                console.log(user.savedPosts)\r\n                for(var i=0; i<user.savedPosts.length; i++){\r\n                    const fetchedPost = await fetchPost(user.savedPosts[i])\r\n                    if(fetchedPost===\"Post not found\"){\r\n                        deleteSavedPosts(user.savedPosts[i])\r\n                    }\r\n                    else{\r\n                        temp.push(fetchedPost)\r\n                    }\r\n                }\r\n                setMySavedPosts(temp)\r\n            }\r\n            \r\n            getMySavedPosts()\r\n\r\n        }, [isEditPostVisible]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            if(user.profilePictureKey !== \"\"){\r\n                S3_GET(user.profilePictureKey)\r\n                    .then(\r\n                        (url) => {\r\n                            setProfilePictureURL(url)\r\n                        }\r\n                    )\r\n            }\r\n        }, [user]\r\n    )\r\n\r\n    const fetchMyPosts = async () => {\r\n        const postsFromServer = await axios.get(base_ + '/api/get-post-by-user')\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(res.data.message)\r\n                        return []\r\n                    }\r\n                    else{\r\n                        return res.data.data\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    message.error('Fail to fetch user posts.')\r\n                    console.log(err)\r\n                    return []\r\n                }\r\n            )\r\n\r\n        return postsFromServer\r\n        \r\n    }\r\n\r\n    const fetchPost = async (postID) => {\r\n        const postFromServer = axios.get(base_ + `/api/get-post-by-id?postID=${postID}`)\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(res.data.message)\r\n                        if(res.data.message==\"Post not found\"){\r\n                            return \"Post not found\"\r\n                        }\r\n                        else{\r\n                            return {}\r\n                        }\r\n                        \r\n                    }\r\n                    else{\r\n                        return res.data.data\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    message.error('Fail to fetch the post.')\r\n                    console.log(err)\r\n                    return {}\r\n                }\r\n            )\r\n\r\n        return postFromServer\r\n    }\r\n\r\n    const onSelectMenu = async (selectedKeys) => {\r\n        setCurrentMenuKey(Number(selectedKeys.key))\r\n    }\r\n\r\n    const addSavedPosts = async (postID) => {\r\n        const updatedUser = {savedPosts: [...user.savedPosts, postID]}\r\n\r\n        axios.put(base_ + '/api/update-user-info', {newUser: updatedUser})\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(`Fail to update saved posts: ${res.data.message}`)\r\n                    }\r\n                    else{\r\n                        setUser({...user, savedPosts: res.data.data.savedPosts})\r\n                        message.success(\"Post saved!\")\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    console.log(err)\r\n                    message.error('Fail to update saved posts.')\r\n                }\r\n            )\r\n    }\r\n\r\n    const deleteSavedPosts = async (postID) => {\r\n        var updatedSavedPosts = user.savedPosts\r\n        updatedSavedPosts.splice(user.savedPosts.indexOf(postID),1)\r\n        const updatedUser = {savedPosts: updatedSavedPosts}\r\n\r\n        axios.put(base_ + '/api/update-user-info', {newUser: updatedUser})\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(`Fail to update saved posts: ${res.data.message}`)\r\n                    }\r\n                    else{\r\n                        setUser({...user, savedPosts: res.data.data.savedPosts})\r\n                        message.success(\"Post unsaved!\")\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    console.log(err)\r\n                    message.error('Fail to update saved posts.')\r\n                }\r\n            )\r\n    }\r\n\r\n    const onClickStar = (postID) => {\r\n        if(user.savedPosts.includes(postID)){\r\n            deleteSavedPosts(postID)\r\n        }\r\n        else{\r\n            addSavedPosts(postID)\r\n        }\r\n    }\r\n\r\n    const deletePost = async (postID) => {\r\n        const postToDelete = await fetchPost(postID)\r\n        for(const key in postToDelete.pictureKeyArray){\r\n            await S3_DELETE_BY_KEY(postToDelete.pictureKeyArray[key])\r\n        }\r\n        axios.delete(base_ + `/api/delete-single-post?postID=${postID}`)\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.err(res.data.message)\r\n                    }\r\n                    else{\r\n                        setMyPosts(myPosts.filter((post) => post._id !== postID))\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    console.log(err)\r\n                    message.error(\"Fail to delete post\")\r\n                }\r\n            )\r\n        \r\n        \r\n    }\r\n\r\n    const showDeleteModal = () => {\r\n        setIsDeleteModalVisible(true);\r\n    };\r\n\r\n    const handleDeleteOk = () => {\r\n        deletePost(selectedPostID)\r\n        setIsDeleteModalVisible(false)\r\n        setTimeout(\r\n            () => {\r\n                setIsProductDetailVisible(false)\r\n            }, 500\r\n        )\r\n        \r\n    };\r\n\r\n    const handleDeleteCancel = () => {\r\n        setIsDeleteModalVisible(false);\r\n    };\r\n\r\n    const onClickDelete = (postID) => {\r\n        setSelectedPostID(postID)\r\n        showDeleteModal()\r\n    }\r\n\r\n    const onClickEdit = (post) => {\r\n        setValue(value+1)\r\n        setSelectedPost(post)\r\n        setIsEditPostVisible(true)\r\n        setIsProductDetailVisible(false)\r\n    }\r\n\r\n    const onClickCard = async (post, e) => {\r\n        setSelectedPost(post)\r\n        console.log(post)\r\n        setSelectedPostUserInfo(post.simplifiedUserInfo)\r\n        setIsProductDetailVisible(true)\r\n    }\r\n\r\n    const onCloseProductDetail = () => {\r\n        setIsProductDetailVisible(false)\r\n        setSelectedPost('')\r\n    }\r\n\r\n    const handleProfilePictureBeforeUpload = (file) => {\r\n        if(file.type.substring(0, file.type.indexOf('/'))!=='image'){\r\n            message.error(\"You can only upload images\")\r\n            return false\r\n        }\r\n        else if(file.size>MAX_CONTENT_LEN){\r\n            message.error(\"Single image cannot exceed 10MB\")\r\n            return false\r\n        }\r\n        else{\r\n            return true\r\n        }\r\n    }\r\n\r\n    const handleProfilePictureUpload = async ({file}) => {\r\n        S3_GET_SIGNED_POST(file, 'ProfilePictures')\r\n        .then(\r\n            (signed) => {\r\n                S3_UPLOAD_SINGLE_FILE(signed, file)\r\n                    .then(\r\n                        () => {\r\n                            const newUser = {profilePictureKey: `ProfilePictures/${file.uid}`}\r\n                            axios.put(base_ + '/api/update-user-info', {newUser: newUser})\r\n                                .then(\r\n                                    (res) => {\r\n                                        if(res.data.code===1){\r\n                                            message.error(`Fail to update profile picture: ${res.data.message}`)\r\n                                        }\r\n                                        else{\r\n                                            message.success(\"Profile picture updated!\")\r\n                                            const data = res.data.data\r\n                                            setUser({...user, profilePictureKey: data.profilePictureKey})\r\n                                        }\r\n                                    }\r\n                                )\r\n                                .catch(\r\n                                    (err) => {\r\n                                        console.log(err)\r\n                                        message.error(\"Fail to update profile picture!\")\r\n                                    }\r\n                                )\r\n                            \r\n                        }\r\n                    )\r\n                    .catch(\r\n                        (err) => {\r\n                            message.error(\"Fail to update profile picture!\")\r\n                        }\r\n                    )\r\n            }\r\n        )\r\n        .catch(\r\n            (err_message) => {\r\n                message.error(err_message)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"profile-container\" style={profileContainerStyle}>\r\n            <Sider\r\n                style={profileSideBarStyle}\r\n                // style={{float: \"left\"}}\r\n                theme=\"light\"\r\n                width={sideBarWidth}\r\n                breakpoint=\"lg\"\r\n                collapsedWidth=\"0\"\r\n                onBreakpoint={broken => {\r\n                    if(broken){\r\n                        setSideBarWidth(\"100%\")\r\n                    }\r\n                    else{\r\n                        setSideBarWidth(\"20%\")\r\n                    }\r\n                }}\r\n                onCollapse={(collapsed, type) => {\r\n                    console.log(collapsed, type);\r\n                }}\r\n            >\r\n                <ImgCrop quality={1} modalTitle=\"Crop Your Profile Picture\" modalOK=\"Confirm\">\r\n                    <Upload customRequest={handleProfilePictureUpload} beforeUpload={handleProfilePictureBeforeUpload} fileList={[]}>\r\n                        <Tooltip title=\"Edit Profile Picture\" placement=\"top\" >\r\n                            {\r\n                                user.profilePictureKey===\"\"?\r\n                                <Avatar size=\"default\" src={'./default_profile_pic.jpg'} style={profilePictureStyle} />:\r\n                                <Avatar size=\"default\" src={profilePictureURL} style={profilePictureStyle} />\r\n                            }\r\n                            \r\n                        </Tooltip>\r\n                    </Upload>\r\n                </ImgCrop>\r\n                \r\n                <div style={basicInfoStyle}>\r\n                    Name: {user.firstName} {user.lastName}\r\n                </div>\r\n                <div style={basicInfoStyle}>\r\n                    Email: {user.email.toLowerCase()}\r\n                </div>\r\n                <div style={basicInfoStyle}>\r\n                    WeChat ID: {user.wechatID===\"\"?\"N/A\":user.wechatID}\r\n                </div>\r\n                <div style={basicInfoStyle}>\r\n                    Phone Number: {user.phoneNum===\"\"?\"N/A\":user.phoneNum}\r\n                </div>\r\n\r\n                <Row>\r\n                    <Col {...dividerLayout} >\r\n                        <Divider orientation=\"left\">\r\n                        </Divider>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Menu id=\"profile-side-bar-menu\" mode=\"inline\" defaultSelectedKeys={[`${defaultMenuKey}`]} onSelect={(selectedKeys)=>onSelectMenu(selectedKeys)}>\r\n                    <Menu.Item key=\"1\">\r\n                        My Posts\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                        Favorite Posts\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\">\r\n                        Change Password\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"4\">\r\n                        Edit Contact Info\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            \r\n            <div id=\"profile-main-body\" style={profileMainBodyStyle}>\r\n                {\r\n                    currentMenuKey==1?\r\n                    <Cards posts={myPosts} displayMyPost={true} onClickDelete={onClickDelete} onClickEdit={onClickEdit} onClickCard={onClickCard}></Cards>:\r\n                    currentMenuKey==2?\r\n                    <Cards posts={mySavedPosts} displayMyPost={false} favoriteIDs={user.savedPosts} onClickStar={onClickStar}  onClickCard={onClickCard} isAuth={true}></Cards>:\r\n                    currentMenuKey==3?\r\n                    <ChangePasswordPage user={user} setUser={setUser}/>:\r\n                    <EditContactInfoPage user={user} setUser={setUser} />\r\n                }\r\n            </div>\r\n\r\n            <Modal \r\n                title=\"Product Detail\" \r\n                visible={isProductDetailVisible}\r\n                onCancel={onCloseProductDetail}\r\n                footer={null}\r\n                width='70%'\r\n            >\r\n                <ProductDetailPage post={selectedPost} displayMyPost={currentMenuKey===1?true:false} onClickStar={onClickStar} isFavorite={user.savedPosts.includes(selectedPost._id)} onClickDelete={onClickDelete} onClickEdit={onClickEdit} user={currentMenuKey==1?user:selectedPostUserInfo}/>\r\n            \r\n                <Modal title=\"Delete Warning\" visible={isDeleteModalVisible && isProductDetailVisible} onOk={handleDeleteOk} onCancel={handleDeleteCancel}>\r\n                    <p>Are you sure you want to delete this post?</p>\r\n                </Modal>\r\n            \r\n            </Modal>\r\n\r\n            <Modal title=\"Delete Warning\" visible={isDeleteModalVisible && !isProductDetailVisible} onOk={handleDeleteOk} onCancel={handleDeleteCancel}>\r\n                <p>Are you sure you want to delete this post?</p>\r\n            </Modal>\r\n\r\n            {\r\n                selectedPost.pictureKeyArray===undefined?\r\n                '':\r\n                <EditPostPage key={value} post={selectedPost} isEditPostVisible={isEditPostVisible} setIsEditPostVisible={setIsEditPostVisible} />  \r\n            }\r\n            \r\n            \r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfilePage\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Button, message } from 'antd';\r\nimport { PasswordInput } from 'antd-password-input-strength';\r\nimport auth from '../auth/auth'\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst formItemLayout =  { \r\n    labelCol: {\r\n        xs: {\r\n          span: 24,\r\n        },\r\n        sm: {\r\n          span: 8,\r\n        },\r\n      },\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n        },\r\n        sm: {\r\n          span: 8,\r\n        },\r\n      },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24, \r\n        },\r\n    },\r\n};\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst LoginPage = ({routerProps, setUserInfo}) => {\r\n    const [form] = Form.useForm();\r\n    const [email, setEmail] = useState('')\r\n    const [pwd, setPwd] = useState('')\r\n\r\n    const onFinish = async () => {\r\n        const userInfo = {\r\n            email: email.toLocaleLowerCase(),\r\n            pwd: pwd\r\n        }\r\n\r\n        axios.post(base_ + '/api/user-login', userInfo)\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code === 1){\r\n                        message.error(res.data.message)\r\n                    }\r\n                    else{\r\n                        message.success(\"Login success!\")\r\n                        auth.login(\r\n                            () => {\r\n                                setUserInfo(res.data.data)\r\n                                routerProps.history.push(\"/\")\r\n                            }\r\n                        )\r\n                    }\r\n                    \r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    message.error(\"Something went wrong!\")\r\n                    console.log(err)\r\n                }\r\n            )\r\n\r\n        setEmail('');\r\n        setPwd('');\r\n        form.resetFields();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Log In</h1>\r\n            <Form\r\n                form = {form}\r\n                {...formItemLayout}\r\n                name = \"login\"\r\n                onFinish = {onFinish}\r\n            >\r\n                <Form.Item\r\n                    name = \"email\"\r\n                    label = \"E-mail\"\r\n                    rules = {[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'Please input a valid E-mail'\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input value = {email} onChange = {(e) => setEmail(e.target.value)}/>\r\n                </Form.Item>\r\n                \r\n                <Form.Item\r\n                    name = \"password\"\r\n                    label = \"Password\"\r\n                    rules = {[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password value={pwd} onChange={(e) => setPwd(e.target.value)}/>\r\n                    \r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type = \"primary\" htmlType = \"submit\">\r\n                        Log In\r\n                    </Button>\r\n                    <Link to='/forgot-password'>&nbsp;&nbsp;&nbsp;&nbsp;Forgot password?</Link>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default LoginPage","import React from 'react'\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport auth from '../auth/auth'\r\n\r\nconst ProtectedRoute = ({isAuth, render: RenderComponents, ...rest}) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={\r\n                props => {\r\n                    if (isAuth) {\r\n                        return <RenderComponents {...props} />;\r\n                    } \r\n                    else {\r\n                        return (\r\n                            <Redirect\r\n                            to={{\r\n                                pathname: \"/missing-permission\",\r\n                                state: {\r\n                                from: props.location\r\n                                }\r\n                            }}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProtectedRoute\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    message,\r\n  } from 'antd';\r\nimport {PasswordInput} from 'antd-password-input-strength'\r\nimport axios from 'axios';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst formItemLayout =  { \r\n    labelCol: {\r\n        xs: {\r\n          span: 24,\r\n        },\r\n        sm: {\r\n          span: 8,\r\n        },\r\n      },\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n        },\r\n        sm: {\r\n          span: 8,\r\n        },\r\n      },\r\n};\r\n\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24, \r\n        },\r\n    },\r\n};\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst ForgotPasswordPage = () => {\r\n    const [form] = Form.useForm();\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [emailVerification, setEmailVerification] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirm, setConfirm] = useState('')\r\n\r\n    const onFinish = async () =>{\r\n\r\n        const body = {\r\n            email: email,\r\n            emailVerification: emailVerification,\r\n            pwd: password\r\n        }\r\n\r\n        // set body to backend (forget-password)\r\n        axios.put(base_ + '/api/forgot-password', body)\r\n            .then(\r\n                (res) => {\r\n                    if(res.data.code===1){\r\n                        message.error(res.data.message)\r\n                    }\r\n                    else{\r\n                        setEmail('')\r\n                        setEmailVerification('')\r\n                        setPassword('')\r\n                        setConfirm('')\r\n                        message.success(res.data.message)\r\n                \r\n                        form.resetFields();\r\n                        \r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                (err) => {\r\n                    message.error(\"Something went wrong!\")\r\n                    console.log(err)\r\n                }\r\n            )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Forgot Password</h1>\r\n\r\n            <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                name=\"change-password\"\r\n                onFinish={onFinish}\r\n            >\r\n\r\n                <Form.Item\r\n                    name = \"email\"\r\n                    label = \"E-mail\"\r\n                    rules = {[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'Please input a valid E-mail'\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input value = {email} onChange = {(e) => setEmail(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"* Email Verification Code\" >\r\n                    <Row gutter={6}>\r\n                        <Col span={20}>\r\n                            <Form.Item\r\n                                name='code'\r\n                                noStyle\t\t\t\t\t\t\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input the email verification code you got!'\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Enter your email verification code\" value={emailVerification} onChange={(e) => setEmailVerification(e.target.value)}/>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <Button>    \r\n                                Get Code\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label={\r\n                        <span>\r\n                            New Password&nbsp;\r\n                            <Tooltip title=\"Password should be at least 6 characters long. You should include numbers, upper-case letters, and lower-case letters in your password.\">\r\n                            <QuestionCircleOutlined />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your new password!',\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                                let hasNum = /\\d/.test(value);\r\n                                let hasUpper = /[A-Z]/.test(value);\r\n                                let hasLower = /[a-z]/.test(value);\r\n                                let hasSpace = / /.test(value)\r\n                                if(hasSpace){\r\n                                    return Promise.reject('Password cannot contain space!');\r\n                                }\r\n                                else if (value.length < 6) {\r\n                                    return Promise.reject('Password should be at least 6 characters long!');\r\n                                }\r\n                                else if(!hasNum || !hasUpper || !hasLower){\r\n                                    return Promise.reject('Please include numbers, upper-case letters, lower-case letters in your password!');\r\n                                }\r\n                                else{\r\n                                    return Promise.resolve();\r\n                                }\r\n                                \r\n                            },\r\n                        }),\r\n                    ]}    \r\n                    hasFeedback\r\n                >\r\n                    <PasswordInput \r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        settings={{\r\n                            colorScheme: {\r\n                                levels: [\"#ff4033\", \"#fe940d\", \"#ffd908\", \"#cbe11d\", \"#6ecc3a\"],\r\n                                noLevel: \"lightgrey\"\r\n                            },\r\n                            height: 7,\r\n                            alwaysVisible: true\r\n                        }}\r\n                        inputProps={{\r\n                            size: 'medium'\r\n                        }}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"confirm\"\r\n                    label=\"Confirm New Password\"\r\n                    hasFeedback\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please confirm your new password!',\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                            if (!value || password === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n\r\n                            return Promise.reject('The two new passwords that you entered do not match!');\r\n                            },\r\n                        }),\r\n                    ]}\r\n                >\r\n                    <Input.Password value={confirm} onChange={(e) => setConfirm(e.target.value)}/>\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordPage\r\n","import React from 'react';\r\nimport './App.less';\r\nimport {useState, useEffect} from 'react'\r\nimport { Result, Button, message } from 'antd';\r\n\r\nimport NavBar from './components/NavBar'\r\nimport SignupForm from './components/SignupForm'\r\nimport MainPage from './components/MainPage'\r\nimport CreatePostPage from './components/CreatePostPage'\r\nimport ProfilePage from './components/ProfilePage'\r\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom'\r\nimport LoginPage from './components/LoginPage';\r\nimport auth from './auth/auth';\r\nimport ProtectedRoute from './auth/ProtectedRoute'\r\nimport ForgotPasswordPage from './components/ForgotPasswordPage';\r\nimport axios from 'axios';\r\n\r\n// const base_ = \"http://localhost:3001\";\r\nconst base_ = \"\"\r\n\r\nconst App = () => {\r\n\r\n  const [userInfo, setUserInfo] = useState();\r\n  const [isAuth, setIsAuth] = useState(auth.isAuthenticated())\r\n\r\n  useEffect(\r\n    () => {\r\n      if(!auth.isAuthenticated()){\r\n        axios.get(base_ + '/api/get-user-info')\r\n          .then(\r\n            (res) => {\r\n              if(res.data.code===1){\r\n                setIsAuth(false)\r\n              }\r\n              else{\r\n                auth.login(\r\n                  () => {\r\n                    setIsAuth(true)\r\n                    setUserInfo(res.data.data)\r\n                  }\r\n                )\r\n                \r\n              }\r\n            }\r\n          )\r\n          .catch(\r\n            (err) => {\r\n              message.error(\"Something went wrong!\")\r\n              console.log(err)\r\n              setIsAuth(false)\r\n            }\r\n          )\r\n      }\r\n      else{\r\n        setIsAuth(true)\r\n      }\r\n    }, [userInfo]\r\n  )\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            path='/'\r\n            exact render={\r\n              isAuth?\r\n              ((props)=>(\r\n                <>\r\n                  {userInfo===undefined?\"\":<NavBar isAuthenticated={true} user={userInfo} currentRoute={\"home\"} routerProps={props} setUserInfo={setUserInfo}/>}\r\n                  {userInfo===undefined?\"\":<MainPage isAuthenticated={true} user={userInfo} setUser={setUserInfo}></MainPage>}\r\n                </>\r\n              ))\r\n              :\r\n              ((props)=>(\r\n                <>\r\n                  <NavBar isAuthenticated={false} currentRoute={\"home\"} routerProps={props} setUserInfo={setUserInfo}/>\r\n                  <MainPage isAuthenticated={false} setUser={setUserInfo} routerProps={props}></MainPage>\r\n                </>\r\n              ))\r\n            }\r\n          ></Route>\r\n\r\n          <Route\r\n            path='/login'\r\n            exact render={\r\n              (props)=>(\r\n                <>\r\n                  <NavBar isAuthenticated={false} currentRoute={\"login\"} routerProps={props} setUserInfo={setUserInfo}/>\r\n                  <LoginPage routerProps={props} setUserInfo={setUserInfo} />\r\n                </>\r\n              )\r\n            }\r\n          ></Route>\r\n\r\n          <Route\r\n            path='/forgot-password'\r\n            exact render={\r\n              (props)=>(\r\n                <>\r\n                  <NavBar isAuthenticated={false} currentRoute={\"forgot-password\"} routerProps={props} setUserInfo={setUserInfo}/>\r\n                  <ForgotPasswordPage routerProps={props} />\r\n                </>\r\n              )\r\n            }\r\n          ></Route>\r\n\r\n          <Route\r\n            path='/register'\r\n            exact render={\r\n              (props)=>(\r\n                <>\r\n                  <NavBar isAuthenticated={false} currentRoute={\"register\"} routerProps={props} setUserInfo={setUserInfo}/>\r\n                  <SignupForm></SignupForm>\r\n                </>\r\n              )\r\n            }\r\n          ></Route>\r\n          \r\n          <ProtectedRoute\r\n            isAuth={setIsAuth}\r\n            path='/create-post'\r\n            exact render={\r\n              (props)=>(\r\n                <>\r\n                  {userInfo===undefined?\"\":<NavBar isAuthenticated={true} user={userInfo} currentRoute={\"create-post\"} routerProps={props} setUserInfo={setUserInfo}/>}\r\n                  {userInfo===undefined?\"\":<CreatePostPage user={userInfo}/>}\r\n                </>\r\n              )\r\n            }\r\n          ></ProtectedRoute>\r\n\r\n          <ProtectedRoute\r\n            isAuth={setIsAuth}\r\n            path='/profile'\r\n            exact render={\r\n              (props)=>(\r\n                <>\r\n                  {userInfo===undefined?\"\":<NavBar isAuthenticated={true} user={userInfo} currentRoute={\"profile\"} routerProps={props} setUserInfo={setUserInfo}/>}\r\n                  {userInfo===undefined?\"\":<ProfilePage user={userInfo} setUser={setUserInfo}/>}\r\n                  \r\n                </>\r\n              )\r\n            }\r\n          ></ProtectedRoute>\r\n\r\n          <Route\r\n            path=\"/missing-permission\"\r\n            render={\r\n              (props) => (\r\n                <Result\r\n                  status=\"403\"\r\n                  title=\"403\"\r\n                  subTitle=\"Sorry, you are need to login to see this page.\"\r\n                  extra={[\r\n                    <Link to=\"/\" key={0}>\r\n                      <Button key=\"to-home\" type=\"primary\">\r\n                        Back Home\r\n                      </Button>\r\n                    </Link>\r\n                    ,\r\n                    <Link to=\"/login\" key={1}>\r\n                      <Button key=\"to-login\" type=\"primary\">\r\n                        Go to Login\r\n                      </Button>\r\n                    </Link>\r\n                    \r\n                  ]}\r\n                />\r\n              )\r\n            }\r\n          ></Route>\r\n\r\n          <Route\r\n            path=\"*\"\r\n            render={\r\n              (props) => (\r\n                <Result\r\n                  status=\"404\"\r\n                  title=\"404\"\r\n                  subTitle=\"Sorry, the page you visited does not exist.\"\r\n                  extra={<Link to=\"/\"><Button type=\"primary\">Back Home</Button></Link>}\r\n                />\r\n              )\r\n            }\r\n          ></Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport axios from 'axios';\r\n\r\nimport CreatePostPage from './components/CreatePostPage'\r\nimport NavBar from './components/NavBar'\r\n\r\naxios.defaults.withCredentials = true\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  //   <App />\r\n  // </React.StrictMode>,\r\n  <span>\r\n    <App />\r\n  </span>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}