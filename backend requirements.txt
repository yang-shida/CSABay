data structure (schema?) of each database
    - users
        - uid 
            - unique id generated automatically by mongoDB
        - firstName
        - lastName
        - email
        - wechatID
        - pwd
        - phoneNum 
            - I don't want to add validation since there could be many different formats like xxx-xxx-xxxx or (xxx)xxx-xxxx or just 9 digits, and they can change it easily later anyway)
        - savedPosts
            - an array of the uids of the posts that are saved by the user
        - profilePictureKey
            - a key to retrieve the user's profile picture from the AWS S3 server
    - posts
        - uid
        - userID
            - the uid of the user who created the post
        - title
        - description
            - potentially long
        - durationDays
            - number of days the post will be saved
        - typeOfPost
            - type of post: selling, buying, subleasing, other
        - zipcode
        - price 
        - pictureKeyArray
            - an array of keys used to retrieve product pictures from the AWS S3 server 
        - email
        - wechatID
        - phoneNum
        - createdTimestamp
            - the time when the post is created
            - generated by the backend when receiving a new post from a create post page
        - modifiedTimestamp
            - the time when the post was last modified
            - can be used to refresh the duration of the post 
            - can also be used to bring the post to front on main page when the user makes updates
            - generated by the backend when receiving a new post from a create post page or a edited post from edit post page


The services I need
    - add-users
        - description:
            - add a new user to the database
        - request:
            - body: an user json object
        - actions:
            - make sure the email is not already in the database
            - check email verification code match 
            - add user to database 
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if fail, state why

    - user-login
        - description:
            - check if the provided email and password match the record in database 
            - TODO: this function requires the use of cookies, I can work on it after we combined the frontend and the backend
        - request:
            - body: a json object with a email and a password 
        - actions:
            - find email in the database 
            - compare the password to see if they are the same
            - if same, return a response with userid in header (use setCookie) and empty body
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if success, return a response with userid in header (use setCookie) and body with user info (WITHOUT pwd); if fail, state why

    - get-user-info
        - description:
            - fetch user info from the database
        - request:
            - empty body, may include the user cookie in the header 
        - actions:
            - if the header contains a user cookie (user uid)
                - if the user exist in the database 
                    - fetch the user info (but remove the password)
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if success, put user object here (WITHOUT pwd); if fail, state why

    - update-user-info
        - description:
            - update user info in database
        - request:
            - header SHOULD contains user cookie
            - body contains the updated user
        - actions:
            - if the header contains a user cookie (user uid)
                - if the user exist in the database (by uid)
                    - update the user info (DO field updates, DON'T just replace the enture user, since the new user does not have pwd field) 
            - if the header does not contain a user cookie, 
                or user does not exist in database , 
                something is wrong with the authentication process, we need to figure it out
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if success, return the updated user info (WITHOUT pwd); if fail, state why

    - change-password
        - description:
            - change the password of an user 
        - request:
            - header SHOULD contains user cookie
            - body contains old and new password
        - actions:
            - if the header contains a user cookie (user uid)
                - if the user exist in the database (by uid)
                    - if the old password match the current password
                        - update password 
            - if the header does not contain a user cookie, 
                or user does not exist in database, 
                something is wrong with the authentication process, we need to figure it out
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if fail, state why

    - email-verification
        - will implement when we finalize the email verification process

    - forget-password
        - description:
            - user forgets his password and need to reset
        - request:
            - body contains email, email verification code, and new password
        - actions:
            - if user exists (by email)
                -  if email verification code match
                    - update password
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if fail, state why
    
    - add-post
        - description:
            - add a post
        - request:
            - header SHOULD contains user cookie
            - body contains the updated post
        - actions:
            - if the header contains a user cookie (user uid)
                - if the user exist in the database (by uid)
                    - add a userID field to the post object (user uid fron cookie)
                    - add a createdTimestamp field to the post object (current time)
                    - add a modifiedTimestamp field to the post object (current time)
            - if the header does not contain a user cookie, 
                or user does not exist in database, 
                something is wrong with the authentication process, we need to figure it out
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if fail, state why

    - update-post
        - description:
            - update a post info 
        - request:
            - header SHOULD contains user cookie
            - body contains the updated post
        - actions:
            - if the header contains a user cookie (user uid)
                - if the user exist in the database (by uid)
                    - if the post belongs to this user
                        - update the post
                        - update the modifiedTimestamp
            - if the header does not contain a user cookie, 
                or user does not exist in database, 
                or the post does not belong to this user, 
                something is wrong with the authentication process, we need to figure it out
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if fail, state why

    - get-all-posts
        - TODO: not sure if we need this

    - get-posts-by-time
        - description:
            - get posts by time
        - request:
            - URL format: backend_URL/get-posts-by-time?startIndex=x&numberOfPosts=y&order=z 
                - order can have two values:
                    - new: get the newest y posts starting from index x
                    - old: get the oldest y posts starting from index x
        - actions:
            - fetch posts from database based on the URL parameters
            - fetch simplified user info based on post.userID
                - simplified user info = firstName, lastName, profilePictureKey
            - append a field called simplifiedUserInfo to the end of each post
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if success, return a json object with two fields: (1) array of posts and (2) how many posts are there in total in the DB; if fail, state why

    - get-posts-by-price
        - description:
            - get posts by price
        - request:
            - URL format: backend_URL/get-posts-by-price?startIndex=x&numberOfPosts=y&order=z 
                - order can have two values:
                    - high: get the most expensive y posts starting from index x
                    - low: get the cheapest y posts starting from index x
        - actions:
            - fetch posts from database based on the URL parameters
            - fetch simplified user info based on post.userID
                - simplified user info = firstName, lastName, profilePictureKey
            - append a field called simplifiedUserInfo to the end of each post
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if success, return a json object with two fields: (1) array of posts and (2) how many posts are there in total in the DB; if fail, state why
    
    - get-posts-by-user
        - description:
            - get all posts of this user
        - request:
            - header SHOULD contain a cookie with user uid
        - actions:
            - if user exists (by user uid)
                - fetch posts that belongs to this user (by checking post.userID=user uid in cookie) from database
                - fetch simplified user info based on post.userID (they should all be the same since the posts are from the same user)
                    - simplified user info = firstName, lastName, profilePictureKey
                - append a field called simplifiedUserInfo to the end of each post
            - if the header does not contain a user cookie, 
                or user does not exist in database, 
                something is wrong with the authentication process, we need to figure it out
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if success, return a json object with two fields: (1) array of posts and (2) how many posts are there in total that belongs to the user; if fail, state why

    - delete-single-post 
        - description:
            - delete a single post
        - request:
            - header SHOULD contain a cookie with user uid
            - URL format: backend_URL/delete-single-post?postID=x 
        - actions:
            - if user exists (by user uid)
                - if post (with postID=x from URL) belongs to this user
                    - delete this post
            - if the header does not contain a user cookie, 
                or user does not exist in database,
                or the post does not belong to this user, 
                something is wrong with the authentication process, we need to figure it out
        - response:
            - code: 0 (success) or 1 (failure)
            - message: if fail, state why

    - everything related to AWS S3 
        - TODO: I will implement those